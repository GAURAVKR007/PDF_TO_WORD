{"version":3,"sources":["webpack:///./src/ui/src/components/PrintModal/WatermarkModal/WatermarkModal.scss?0d08","webpack:///./src/ui/src/components/PrintModal/PrintModal.scss?bb1e","webpack:///./src/ui/src/components/PrintModal/WatermarkModal/web-fonts.js","webpack:///./src/ui/src/components/PrintModal/WatermarkModal/WatermarkModal.js","webpack:///./src/ui/src/components/PrintModal/WatermarkModal/index.js","webpack:///./src/ui/src/components/PrintModal/PrintModal.js","webpack:///./src/ui/src/components/PrintModal/index.js"],"names":["module","exports","FONTS","i","FONT_SIZES","WATERMARK_LOCATIONS","CENTER","TOP_LEFT","TOP_RIGHT","TOP_CENTER","BOT_LEFT","BOT_RIGHT","BOT_CENTER","FORM_FIELD_KEYS","DEFAULT_VALS","window","Core","Annotations","Color","WATERMARK_API_LOCATIONS","WatermarkModal","props","isVisible","setState","locationSettings","state","previousLocationSettings","core","getWatermark","preExistingWatermark","addWatermarks","removeWatermarkCreatedByModal","setWatermark","watermarkOptions","createWatermarks","pageHeight","getPageHeight","pageIndexToView","desiredZoomForWidth","getPageWidth","desiredZoomForHeight","desiredZoom","Math","min","getDocument","loadCanvas","pageNumber","zoom","drawComplete","canvas","nodes","canvasContainerRef","current","childNodes","length","removeChild","style","border","height","appendChild","value","fontStyles","isBolded","push","getFontStyles","BOLD","isItalic","ITALIC","isUnderlined","UNDERLINE","fontSize","fontFamily","font","color","toString","opacity","text","watermarks","Object","keys","forEach","key","temp","constructWatermarkOption","modalClosed","currLocationSettings","currSelectedLocation","getCurrentSelectedLocation","event","preventDefault","initializeLocationSettings","formSubmitted","lineLength","circleRadius","visible","isColorPaletteVisible","locationKey","locationSetting","isSelected","location","object","find","newColor","currLocation","currLocationSetting","R","G","B","undefined","lockFocus","React","createRef","prevProps","addEventListener","this","closeModal","handleWatermarkOnVisibilityChanged","t","formInfo","onSwipedUp","onSwipedDown","preventDefaultTouchmoveEvent","DataElementWrapper","className","id","data-element","ModalWrapper","isOpen","title","closeButtonDataElement","onCloseClick","ref","onSubmit","e","htmlFor","onChange","onLocationChanged","target","map","handleInputChange","type","Slider","property","displayProperty","getDisplayValue","round","getCirclePosition","getCirclePosn","convertRelativeCirclePositionToValue","circlePosn","onSliderChange","onStyleChange","Button","ariaLabel","backgroundColor","toHexString","onClick","setColorPaletteVisibility","dataElement","img","isActive","ColorPalette","onColorChanged","resetForm","onOkPressed","PureComponent","PropTypes","bool","number","func","isRequired","withTranslation","PrintModal","useSelector","selectors","isElementDisabled","DataElements","PRINT_MODAL","isElementOpen","getCurrentPage","getPrintQuality","getDefaultPrintOptions","getPageLabels","getSortStrategy","getColorMap","getDisplayMode","getPrintedNoteDateFormat","getCurrentLanguage","getWatermarkModalOptions","getTimezone","shallowEqual","isDisabled","isApplyWatermarkDisabled","currentPage","printQuality","defaultPrintOptions","pageLabels","sortStrategy","colorMap","layoutMode","printedNoteDateFormat","language","watermarkModalOptions","timezone","dispatch","useDispatch","useTranslation","allPages","useRef","currentPageRef","customPages","customInputRef","includeCommentsRef","currentView","existingWatermarksRef","useState","allowWatermarkModal","setAllowWatermarkModal","count","setCount","pagesToPrint","setPagesToPrint","isWatermarkModalVisible","setIsWatermarkModalVisible","includeAnnotations","setIncludeAnnotations","includeComments","setIncludeComments","maintainPageOrientation","setMaintainPageOrientation","isGrayscale","setIsGrayscale","useEffect","adjustHeightIfSinglePage","print","document","getElementById","children","parentElement","setAttribute","removeEventListener","isPrinting","getClassName","customPagesLabelElement","hidden","checked","placeholder","aria-label","disabled","actions","closeElements","SIGNATURE_MODAL","LOADING_MODAL","PROGRESS_MODAL","ERROR_MODAL","then","watermark","getTotalPages","pageCount","LayoutMode","FacingCover","FacingCoverContinuous","FacingContinuous","Facing","customInput","replace","getPageArrayFromString","createPagesAndPrint","createPages","creatingPages","pagePromise","Promise","all","pages","printPages","closePrintModal","console","error","closeElement","setWatermarkModalVisibility","setWatermarkModalOptions","containerOnClick","stopPropagation","Choice","name","radio","label","defaultChecked","center","prevState","setPrintQuality","Number"],"mappings":"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","file":"chunks/9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LEFT_HEADER_WIDTH\":\"41px\",\"RIGHT_HEADER_WIDTH\":\"41px\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LEFT_HEADER_WIDTH\":\"41px\",\"RIGHT_HEADER_WIDTH\":\"41px\"};","// https://websitesetup.org/web-safe-fonts-html-css/\nexport const FONTS = [\n  'Arial',\n  'Times New Roman',\n  'Tahoma ',\n  'Trebuchet MS',\n  'Courier',\n  'Verdana',\n  'Georgia',\n  'Palatino',\n  'Comic Sans MS',\n  'Arial Black',\n  'Impact',\n];","import ColorPalette from 'components/ColorPalette';\nimport Slider from 'components/Slider';\nimport { circleRadius } from 'constants/slider';\nimport core from 'core';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { withTranslation } from 'react-i18next';\nimport Button from 'components/Button';\nimport { FONTS } from './web-fonts';\nimport './WatermarkModal.scss';\nimport ModalWrapper from '../../ModalWrapper';\n\nimport { Swipeable } from 'react-swipeable';\nimport DataElementWrapper from 'src/components/DataElementWrapper';\n\nconst DESIRED_WIDTH = 300;\nconst DESIRED_HEIGHT = 300;\n\n// numbers were taken from font dropdown menu in google docs\nconst FONT_SIZES = [8, 9, 10, 11, 12, 14, 16, 18, 24, 30, 36, 48, 60, 72, 96];\nconst DEFAULT_FONT_SIZE = 48;\n\nconst WATERMARK_LOCATIONS = {\n  CENTER: 'center',\n  TOP_LEFT: 'topLeft',\n  TOP_RIGHT: 'topRight',\n  TOP_CENTER: 'topCenter',\n  BOT_LEFT: 'bottomLeft',\n  BOT_RIGHT: 'bottomRight',\n  BOT_CENTER: 'bottomCenter',\n};\n\nconst FORM_FIELD_KEYS = {\n  location: 'location',\n  fontSize: 'fontSize',\n  text: 'text',\n  color: 'color',\n  opacity: 'opacity',\n  font: 'font',\n  isBolded: 'isBolded',\n  isItalic: 'isItalic',\n  isUnderlined: 'isUnderlined',\n};\n\nconst DEFAULT_VALS = {\n  [FORM_FIELD_KEYS.location]: WATERMARK_LOCATIONS.CENTER,\n  [FORM_FIELD_KEYS.fontSize]: DEFAULT_FONT_SIZE,\n  [FORM_FIELD_KEYS.text]: '',\n  // red\n  [FORM_FIELD_KEYS.color]: new window.Core.Annotations.Color(228, 66, 52),\n  [FORM_FIELD_KEYS.opacity]: 100,\n  [FORM_FIELD_KEYS.font]: FONTS[0],\n  [FORM_FIELD_KEYS.isBolded]: false,\n  [FORM_FIELD_KEYS.isItalic]: false,\n  [FORM_FIELD_KEYS.isUnderlined]: false,\n};\n\n// Values come from https://docs.apryse.com/api/web/Core.DocumentViewer.html#setWatermark__anchor\nconst WATERMARK_API_LOCATIONS = {\n  [WATERMARK_LOCATIONS.CENTER]: 'diagonal',\n  [WATERMARK_LOCATIONS.TOP_LEFT]: 'headerLeft',\n  [WATERMARK_LOCATIONS.TOP_RIGHT]: 'headerRight',\n  [WATERMARK_LOCATIONS.TOP_CENTER]: 'headerCenter',\n  [WATERMARK_LOCATIONS.BOT_LEFT]: 'footerLeft',\n  [WATERMARK_LOCATIONS.BOT_RIGHT]: 'footerRight',\n  [WATERMARK_LOCATIONS.BOT_CENTER]: 'footerCenter',\n};\n\nclass WatermarkModal extends React.PureComponent {\n  static propTypes = {\n    isVisible: PropTypes.bool,\n    pageIndexToView: PropTypes.number,\n    modalClosed: PropTypes.func,\n    formSubmitted: PropTypes.func,\n    t: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    const locationSettings = this.initializeLocationSettings();\n    this.preExistingWatermark = undefined;\n    this.state = {\n      isColorPaletteVisible: false,\n      locationSettings,\n      previousLocationSettings: locationSettings,\n      lockFocus: false,\n    };\n    this.canvasContainerRef = React.createRef();\n  }\n\n  componentDidUpdate(prevProps) {\n    core.addEventListener('documentLoaded', this.closeModal);\n\n    if (this.props.isVisible !== prevProps.isVisible) {\n      // Sets focus with a slight delay after modal becomes visible in order to\n      // prevent stack overflow with competing print modal focus lock.\n      if (this.props.isVisible) {\n        this.setState({ lockFocus: true });\n      } else {\n        this.setState({ lockFocus: false });\n      }\n\n      this.setState(\n        {\n          isColorPaletteVisible: false,\n        },\n        () => this.handleWatermarkOnVisibilityChanged(),\n      );\n    }\n  }\n\n  handleWatermarkOnVisibilityChanged = () => {\n    if (this.props.isVisible) {\n      this.setState(\n        {\n          locationSettings: this.state.previousLocationSettings,\n        },\n        async () => {\n          // Store the pre-existing watermark (if any) before we overwrite it\n          this.preExistingWatermark = await core.getWatermark();\n          this.addWatermarks();\n        },\n      );\n    } else {\n      this.removeWatermarkCreatedByModal();\n      core.setWatermark(this.preExistingWatermark);\n    }\n  };\n\n  addWatermarks = () => {\n    const watermarkOptions = this.createWatermarks();\n\n    core.setWatermark(watermarkOptions);\n\n    const pageHeight = core.getPageHeight(this.props.pageIndexToView + 1);\n    const pageWidth = core.getPageWidth(this.props.pageIndexToView + 1);\n\n    const desiredZoomForWidth = DESIRED_WIDTH / pageWidth;\n    const desiredZoomForHeight = DESIRED_HEIGHT / pageHeight;\n\n    const desiredZoom = Math.min(desiredZoomForHeight, desiredZoomForWidth);\n\n    core.getDocument().loadCanvas({\n      pageNumber: this.props.pageIndexToView + 1,\n      zoom: desiredZoom,\n      drawComplete: (canvas) => {\n        const nodes = this.canvasContainerRef.current.childNodes;\n        if (nodes && nodes.length > 0) {\n          this.canvasContainerRef.current.removeChild(nodes[0]);\n        }\n        canvas.style.border = '1px solid black';\n        canvas.style.height = this.canvasContainerRef.current.style.height;\n        this.canvasContainerRef.current.appendChild(canvas);\n      },\n    });\n\n    // Note: do not update and refresh the doc else it may affect other docs as well\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  constructWatermarkOption = (value) => {\n    const fontStyles = [];\n    if (value.isBolded) {\n      fontStyles.push(core.getFontStyles().BOLD);\n    }\n    if (value.isItalic) {\n      fontStyles.push(core.getFontStyles().ITALIC);\n    }\n    if (value.isUnderlined) {\n      fontStyles.push(core.getFontStyles().UNDERLINE);\n    }\n    const watermarkOption = {\n      fontSize: value.fontSize,\n      fontFamily: value.font,\n      color: value.color.toString(),\n      opacity: value.opacity,\n      text: value.text,\n      fontStyles,\n    };\n\n    return watermarkOption;\n  };\n\n  createWatermarks = () => {\n    const watermarks = {};\n\n    Object.keys(WATERMARK_LOCATIONS).forEach((key) => {\n      const temp = this.constructWatermarkOption(\n        this.state.locationSettings[key],\n      );\n      const value = WATERMARK_LOCATIONS[key];\n      watermarks[WATERMARK_API_LOCATIONS[value]] = temp;\n    });\n    return watermarks;\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  removeWatermarkCreatedByModal = () => {\n    core.setWatermark({});\n  };\n\n  closeModal = () => {\n    this.props.modalClosed();\n  };\n\n  handleInputChange = (key, value) => {\n    const currLocationSettings = {\n      ...this.state.locationSettings,\n    };\n    const currSelectedLocation = this.getCurrentSelectedLocation();\n    currLocationSettings[currSelectedLocation] = {\n      ...currLocationSettings[currSelectedLocation],\n      [key]: value,\n    };\n\n    this.setState(\n      {\n        locationSettings: currLocationSettings,\n      },\n      () => {\n        this.addWatermarks();\n      },\n    );\n  };\n\n  resetForm = (event) => {\n    event.preventDefault();\n    const locationSettings = this.initializeLocationSettings();\n    this.setState(\n      {\n        locationSettings,\n      },\n      () => this.addWatermarks(),\n    );\n  };\n\n  onOkPressed = () => {\n    this.setState(\n      {\n        previousLocationSettings: this.state.locationSettings,\n      },\n      () => {\n        // the order of these fxn calls matter\n        this.props.modalClosed();\n        const watermarkOptions = this.createWatermarks();\n        this.props.formSubmitted(watermarkOptions);\n      },\n    );\n  };\n\n  getCirclePosn = (lineLength, opacity) => {\n    const lineStart = circleRadius;\n    return opacity * lineLength + lineStart;\n  };\n\n  setColorPaletteVisibility = (visible) => {\n    this.setState({ isColorPaletteVisible: visible });\n  };\n\n  onLocationChanged = (key) => {\n    const currLocationSettings = {\n      ...this.state.locationSettings,\n    };\n    Object.keys(currLocationSettings).forEach((locationKey) => {\n      let locationSetting = currLocationSettings[locationKey];\n      locationSetting = {\n        ...locationSetting,\n        isSelected: key === locationKey,\n      };\n      currLocationSettings[locationKey] = locationSetting;\n    });\n\n    this.setState(\n      {\n        locationSettings: currLocationSettings,\n      },\n      () => {\n        this.addWatermarks();\n      },\n    );\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  initializeLocationSettings = () => {\n    const locationSettings = {};\n    Object.keys(WATERMARK_LOCATIONS).forEach((key) => {\n      // ignore location as it is redundant as we already have location key\n      const { ...others } = DEFAULT_VALS;\n      const temp = {\n        ...others,\n        isSelected: WATERMARK_LOCATIONS[key] === DEFAULT_VALS.location,\n      };\n      locationSettings[key] = temp;\n    });\n    return locationSettings;\n  };\n\n  // eslint-disable-next-line class-methods-use-this\n  getKeyByValue = (object, value) => Object.keys(object).find((key) => object[key] === value);\n\n  getCurrentSelectedLocation = () => Object.keys(this.state.locationSettings).find((locationKey) => {\n    const locationSetting = this.state.locationSettings[locationKey];\n    return locationSetting.isSelected;\n  });\n\n  onColorChanged = (newColor) => {\n    const currLocation = this.getCurrentSelectedLocation();\n    const currLocationSetting = this.state.locationSettings[currLocation];\n    currLocationSetting[FORM_FIELD_KEYS.color] = new window.Core.Annotations.Color(\n      newColor.R,\n      newColor.G,\n      newColor.B,\n    );\n    const locationSettings = {\n      ...this.state.locationSettings,\n    };\n    if (!currLocationSetting[FORM_FIELD_KEYS.text]) {\n      // if text is undefined, persist the changed color to other location settings (customer's request)\n      Object.keys(WATERMARK_LOCATIONS).forEach((location) => {\n        const locationSetting = locationSettings[location];\n        if (!locationSetting[FORM_FIELD_KEYS.text]) {\n          locationSetting[FORM_FIELD_KEYS.color] = new window.Core.Annotations.Color(\n            newColor.R,\n            newColor.G,\n            newColor.B,\n          );\n        }\n      });\n    }\n    this.setState(\n      {\n        locationSettings,\n      },\n      () => {\n        this.addWatermarks();\n      },\n    );\n  };\n\n  render() {\n    const { isVisible } = this.props;\n    if (!isVisible) {\n      return null;\n    }\n\n    const { t } = this.props;\n\n    const currLocation = this.getCurrentSelectedLocation();\n    const formInfo = this.state.locationSettings[currLocation];\n    return (\n      <Swipeable\n        onSwipedUp={this.closeModal}\n        onSwipedDown={this.closeModal}\n        preventDefaultTouchmoveEvent\n      >\n        <DataElementWrapper\n          className={'Modal Watermark'}\n          id=\"watermarkModal\"\n          data-element=\"watermarkModal\"\n        >\n          <ModalWrapper isOpen={this.state.lockFocus} title={'option.watermark.addWatermark'}\n            closeButtonDataElement={'watermarkModalCloseButton'}\n            onCloseClick={this.closeModal}\n          >\n            <div className=\"swipe-indicator\" />\n\n            <div className=\"form-content-container\">\n              <div\n                className=\"canvas-container\"\n                ref={this.canvasContainerRef}\n              ></div>\n\n              <div className=\"watermark-settings\">\n                <form id=\"form\" onSubmit={(e) => e.preventDefault()}>\n                  <div className=\"form-field\">\n                    <label htmlFor=\"location\">{t('option.watermark.location')}</label>\n                    <select\n                      id=\"location\"\n                      onChange={(event) => {\n                        this.onLocationChanged(event.target.value);\n                      }}\n                    >\n                      {Object.keys(WATERMARK_LOCATIONS).map((key) => (\n                        <option key={key} value={key}>{t(`option.watermark.locations.${WATERMARK_LOCATIONS[key]}`)}</option>\n                      ))}\n                    </select>\n                    <div className=\"separator divider\"></div>\n                  </div>\n\n                  <div className=\"form-field\">\n                    <label htmlFor=\"textInput\">{t('option.watermark.text')}</label>\n                    <input\n                      className=\"text-input\"\n                      id=\"textInput\"\n                      value={formInfo[FORM_FIELD_KEYS.text]}\n                      onChange={(event) => this.handleInputChange(\n                        FORM_FIELD_KEYS.text,\n                        event.target.value,\n                      )\n                      }\n                      type=\"text\"\n                    />\n                  </div>\n                  <div className=\"form-field\">\n                    <label htmlFor=\"fonts\">{t('option.watermark.font')}</label>\n                    <select\n                      id=\"fonts\"\n                      value={formInfo[FORM_FIELD_KEYS.font]}\n                      onChange={(event) => this.handleInputChange(\n                        FORM_FIELD_KEYS.font,\n                        event.target.value,\n                      )\n                      }\n                    >\n                      {FONTS.map((font) => (\n                        <option key={font}>{font}</option>\n                      ))}\n                    </select>\n                  </div>\n                  <div className=\"form-field\">\n                    <label htmlFor=\"fontSize\">{t('option.watermark.size')}</label>\n                    <select\n                      id=\"fontSize\"\n                      value={formInfo[FORM_FIELD_KEYS.fontSize]}\n                      onChange={(event) => this.handleInputChange(\n                        FORM_FIELD_KEYS.fontSize,\n                        +event.target.value,\n                      )\n                      }\n                    >\n                      {FONT_SIZES.map((fontSize) => (\n                        <option key={fontSize}>{fontSize}</option>\n                      ))}\n                    </select>\n                  </div>\n                  <div className=\"form-field opacity-slider\" id=\"opacitySlider\">\n                    <Slider\n                      property={'opacity'} // arbitrary property name. this property isn't used in this file\n                      displayProperty={'opacity'} // arbitrary property name. this property isn't used in this file\n                      value={formInfo[FORM_FIELD_KEYS.opacity] / 100}\n                      getDisplayValue={(opacity) => `${Math.round(opacity * 100)}%`}\n                      getCirclePosition={this.getCirclePosn}\n                      convertRelativeCirclePositionToValue={(circlePosn) => circlePosn\n                      }\n                      onSliderChange={() => {}}\n                      onStyleChange={(property, value) => this.handleInputChange(\n                        FORM_FIELD_KEYS.opacity,\n                        Math.round(value * 100),\n                      )\n                      }\n                    />\n                  </div>\n                  <div className=\"form-field\">\n                    <label>{t('option.watermark.style')}</label>\n                    <div className=\"style-container\">\n                      <Button\n                        id=\"currentColorCell\"\n                        className=\"colorSelect\"\n                        ariaLabel=\"colorSelectButton\"\n                        style={{\n                          backgroundColor: formInfo[\n                            FORM_FIELD_KEYS.color\n                          ].toHexString(),\n                        }}\n                        onClick={() => this.setColorPaletteVisibility(\n                          !this.state.isColorPaletteVisible,\n                        )\n                        }\n                      />\n                      <div className=\"style-container\">\n                        <Button\n                          dataElement=\"boldText\"\n                          img=\"icon-text-bold\"\n                          isActive={formInfo[FORM_FIELD_KEYS.isBolded]}\n                          onClick={() => this.handleInputChange(\n                            FORM_FIELD_KEYS.isBolded,\n                            !formInfo[FORM_FIELD_KEYS.isBolded],\n                          )\n                          }\n                        />\n                        <Button\n                          dataElement=\"italicizeText\"\n                          img=\"icon-text-italic\"\n                          isActive={formInfo[FORM_FIELD_KEYS.isItalic]}\n                          onClick={() => this.handleInputChange(\n                            FORM_FIELD_KEYS.isItalic,\n                            !formInfo[FORM_FIELD_KEYS.isItalic],\n                          )\n                          }\n                        />\n                        <Button\n                          dataElement=\"underlineText\"\n                          img=\"icon-text-underline\"\n                          isActive={formInfo[FORM_FIELD_KEYS.isUnderlined]}\n                          onClick={() => this.handleInputChange(\n                            FORM_FIELD_KEYS.isUnderlined,\n                            !formInfo[FORM_FIELD_KEYS.isUnderlined],\n                          )\n                          }\n                        />\n                      </div>\n                    </div>\n\n                    {this.state.isColorPaletteVisible && (\n                      <div\n                        className={'Popup StylePopup'}\n                        id=\"stylePopup\"\n                        onClick={() => this.setColorPaletteVisibility(false)}\n                      >\n                        <ColorPalette\n                          color={formInfo[FORM_FIELD_KEYS.color]}\n                          property={'TextColor'} // arbitrary property name. this property isn't used in this file\n                          onStyleChange={(property, color) => {\n                            this.onColorChanged(color);\n                            this.setColorPaletteVisibility(false);\n                          }}\n                        />\n                      </div>\n                    )}\n\n                  </div>\n                </form>\n              </div>\n            </div>\n\n            <div className=\"divider\"></div>\n            <div className=\"button-container\">\n              <button\n                className=\"reset-settings\"\n                id=\"reset\"\n                onClick={this.resetForm}\n              >\n                {t('option.watermark.resetAllSettings')}\n              </button>\n              <button\n                className=\"ok button\"\n                id=\"submit\"\n                onClick={this.onOkPressed}\n              >\n                {t('action.add')}\n              </button>\n            </div>\n          </ModalWrapper>\n        </DataElementWrapper>\n      </Swipeable>\n    );\n  }\n}\n\nexport default withTranslation()(WatermarkModal);\n","import WatermarkModal from './WatermarkModal';\n\nexport default WatermarkModal;\n","import React, { useState, useEffect, useRef } from 'react';\nimport { Swipeable } from 'react-swipeable';\nimport actions from 'actions';\nimport selectors from 'selectors';\nimport core from 'core';\nimport getPageArrayFromString from 'helpers/getPageArrayFromString';\nimport getClassName from 'helpers/getClassName';\nimport { creatingPages, printPages } from 'helpers/print';\nimport LayoutMode from 'constants/layoutMode';\nimport WatermarkModal from 'components/PrintModal/WatermarkModal';\nimport Choice from 'components/Choice/Choice';\nimport ModalWrapper from 'components/ModalWrapper';\nimport { useSelector, useDispatch, shallowEqual } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport DataElements from 'constants/dataElement';\n\nimport './PrintModal.scss';\n\nconst PrintModal = () => {\n  const [\n    isDisabled,\n    isOpen,\n    isApplyWatermarkDisabled,\n    currentPage,\n    printQuality,\n    defaultPrintOptions,\n    pageLabels,\n    sortStrategy,\n    colorMap,\n    layoutMode,\n    printedNoteDateFormat,\n    language,\n    watermarkModalOptions,\n    timezone\n  ] = useSelector(\n    (state) => [\n      selectors.isElementDisabled(state, DataElements.PRINT_MODAL),\n      selectors.isElementOpen(state, DataElements.PRINT_MODAL),\n      selectors.isElementDisabled(state, 'applyWatermark'),\n      selectors.getCurrentPage(state),\n      selectors.getPrintQuality(state),\n      selectors.getDefaultPrintOptions(state),\n      selectors.getPageLabels(state),\n      selectors.getSortStrategy(state),\n      selectors.getColorMap(state),\n      selectors.getDisplayMode(state),\n      selectors.getPrintedNoteDateFormat(state),\n      selectors.getCurrentLanguage(state),\n      selectors.getWatermarkModalOptions(state),\n      selectors.getTimezone(state)\n    ],\n    shallowEqual\n  );\n  const dispatch = useDispatch();\n  const [t] = useTranslation();\n\n  const allPages = useRef();\n  const currentPageRef = useRef();\n  const customPages = useRef();\n  const customInputRef = useRef();\n  const includeCommentsRef = useRef();\n  const currentView = useRef();\n  const existingWatermarksRef = useRef();\n\n  const [allowWatermarkModal, setAllowWatermarkModal] = useState(false);\n  const [count, setCount] = useState(-1);\n  const [pagesToPrint, setPagesToPrint] = useState([]);\n  const [isWatermarkModalVisible, setIsWatermarkModalVisible] = useState(false);\n  const [includeAnnotations, setIncludeAnnotations] = useState(true);\n  const [includeComments, setIncludeComments] = useState(false);\n  const [maintainPageOrientation, setMaintainPageOrientation] = useState(false);\n  const [isGrayscale, setIsGrayscale] = useState(false);\n\n  useEffect(() => {\n    if (defaultPrintOptions) {\n      setIncludeAnnotations(defaultPrintOptions.includeAnnotations ?? includeAnnotations);\n      setIncludeComments(defaultPrintOptions.includeComments ?? includeComments);\n      setMaintainPageOrientation(defaultPrintOptions.maintainPageOrientation ?? maintainPageOrientation);\n    }\n  }, [defaultPrintOptions]);\n\n  useEffect(() => {\n    const adjustHeightIfSinglePage = () => {\n      const print = document.getElementById('print-handler');\n\n      if (!print) {\n        return;\n      }\n\n      if (print.children.length === 1) {\n        print.parentElement.setAttribute('style', 'height: 99%;');\n      } else {\n        print.parentElement.setAttribute('style', 'height: 100%;');\n      }\n    };\n\n    window.addEventListener('beforeprint', adjustHeightIfSinglePage);\n\n    return () => {\n      window.removeEventListener('beforeprint', adjustHeightIfSinglePage);\n    };\n  }, []);\n\n  const isPrinting = count >= 0;\n  const className = getClassName('Modal PrintModal', { isOpen });\n  const customPagesLabelElement = (\n    <>\n      {t('option.print.specifyPages')}\n      <input\n        ref={customInputRef}\n        hidden={!customPages.current || (customPages.current && !customPages.current.checked)}\n        type=\"text\"\n        placeholder={t('message.customPrintPlaceholder')}\n        aria-label={t('message.customPrintPlaceholder')}\n        onChange={onChange}\n        disabled={isPrinting}\n      />\n    </>\n  );\n\n  useEffect(() => {\n    onChange();\n    dispatch(actions.closeElements([\n      DataElements.SIGNATURE_MODAL,\n      DataElements.LOADING_MODAL,\n      DataElements.PROGRESS_MODAL,\n      DataElements.ERROR_MODAL,\n    ]));\n    core.getWatermark().then((watermark) => {\n      setAllowWatermarkModal(\n        watermark === undefined ||\n        watermark === null ||\n        Object.keys(watermark).length === 0\n      );\n      existingWatermarksRef.current = watermark;\n    });\n\n    return () => {\n      core.setWatermark(existingWatermarksRef.current);\n      setIsWatermarkModalVisible(false);\n    };\n  }, []);\n\n  const onChange = () => {\n    let pagesToPrint = [];\n\n    if (allPages.current.checked) {\n      for (let i = 1; i <= core.getTotalPages(); i++) {\n        pagesToPrint.push(i);\n      }\n    } else if (currentPageRef.current.checked) {\n      const pageCount = core.getTotalPages();\n\n      // when displaying 2 pages, \"Current\" should print both of them\n      switch (layoutMode) {\n        case LayoutMode.FacingCover:\n        case LayoutMode.FacingCoverContinuous:\n          if (\n            currentPage === 1 ||\n            (currentPage === pageCount && pageCount % 2 === 0)\n          ) {\n            // first page or last page if single page\n            pagesToPrint.push(currentPage);\n          } else {\n            pagesToPrint =\n              currentPage % 2\n                ? [currentPage - 1, currentPage]\n                : [currentPage, currentPage + 1];\n          }\n          break;\n        case LayoutMode.FacingContinuous:\n        case LayoutMode.Facing:\n          if (currentPage === pageCount && pageCount % 2 === 1) {\n            // last page if single page\n            pagesToPrint.push(currentPage);\n          } else {\n            pagesToPrint =\n              currentPage % 2\n                ? [currentPage, currentPage + 1]\n                : [currentPage - 1, currentPage];\n          }\n          break;\n        default:\n          pagesToPrint.push(currentPage);\n          break;\n      }\n    } else if (customPages.current.checked) {\n      const customInput = customInputRef.current.value.replace(/\\s+/g, '');\n      pagesToPrint = getPageArrayFromString(customInput, pageLabels);\n    } else if (currentView.current.checked) {\n      pagesToPrint = [currentPage];\n    }\n\n    setPagesToPrint(pagesToPrint);\n  };\n\n  const createPagesAndPrint = (e) => {\n    e.preventDefault();\n\n    if (pagesToPrint.length < 1) {\n      return;\n    }\n\n    setCount(0);\n\n    if (allowWatermarkModal) {\n      core.setWatermark(watermarkModalOptions);\n    } else {\n      core.setWatermark(existingWatermarksRef.current);\n    }\n\n    const createPages = creatingPages(\n      pagesToPrint,\n      includeComments,\n      includeAnnotations,\n      maintainPageOrientation,\n      printQuality,\n      sortStrategy,\n      colorMap,\n      printedNoteDateFormat,\n      undefined,\n      currentView.current?.checked,\n      language,\n      false,\n      isGrayscale,\n      timezone\n    );\n    createPages.forEach(async (pagePromise) => {\n      await pagePromise;\n      setCount(count < pagesToPrint.length && (count !== -1 ? count + 1 : count));\n    });\n    Promise.all(createPages)\n      .then((pages) => {\n        printPages(pages);\n        closePrintModal();\n      })\n      .catch((e) => {\n        console.error(e);\n        setCount(-1);\n      });\n  };\n\n  const closePrintModal = () => {\n    setCount(-1);\n    dispatch(actions.closeElement(DataElements.PRINT_MODAL));\n  };\n\n  const setWatermarkModalVisibility = (visible) => {\n    setIsWatermarkModalVisible(visible);\n  };\n\n  return isDisabled ? null : (\n    <Swipeable\n      onSwipedUp={closePrintModal}\n      onSwipedDown={closePrintModal}\n      preventDefaultTouchmoveEvent\n    >\n      <>\n        <WatermarkModal\n          isVisible={!!(isOpen && isWatermarkModalVisible)}\n          // pageIndex starts at index 0 and getCurrPage number starts at index 1\n          pageIndexToView={currentPage - 1}\n          modalClosed={setWatermarkModalVisibility}\n          formSubmitted={(value) => dispatch(actions.setWatermarkModalOptions(value))}\n        />\n        <div\n          className={className}\n          data-element={DataElements.PRINT_MODAL}\n        >\n          <ModalWrapper isOpen={isOpen && !isWatermarkModalVisible} title={'option.print.printSettings'}\n            containerOnClick={(e) => e.stopPropagation()} onCloseClick={closePrintModal}\n            closeButtonDataElement={'printModalCloseButton'}\n          >\n            <div className=\"swipe-indicator\" />\n            <div className=\"settings\">\n              <div className=\"section\">\n                <div className=\"section-label\">{`${t('option.print.pages')}:`}</div>\n                <form\n                  className=\"settings-form\"\n                  onChange={onChange}\n                  onSubmit={createPagesAndPrint}\n                >\n                  <Choice\n                    dataElement=\"allPagesPrintOption\"\n                    ref={allPages}\n                    id=\"all-pages\"\n                    name=\"pages\"\n                    radio\n                    label={t('option.print.all')}\n                    defaultChecked\n                    disabled={isPrinting}\n                    center\n                  />\n                  <Choice\n                    dataElement=\"currentPagePrintOption\"\n                    ref={currentPageRef}\n                    id=\"current-page\"\n                    name=\"pages\"\n                    radio\n                    label={t('option.print.current')}\n                    disabled={isPrinting}\n                    center\n                  />\n                  <Choice\n                    dataElement=\"currentViewPrintOption\"\n                    ref={currentView}\n                    id=\"current-view\"\n                    name=\"pages\"\n                    radio\n                    label={t('option.print.view')}\n                    disabled={isPrinting}\n                    center\n                  />\n                  <Choice\n                    dataElement=\"customPagesPrintOption\"\n                    ref={customPages}\n                    id=\"custom-pages\"\n                    name=\"pages\"\n                    className=\"specify-pages-choice\"\n                    radio\n                    label={customPagesLabelElement}\n                    disabled={isPrinting}\n                    center\n                  />\n                  <Choice\n                    dataElement=\"commentsPrintOption\"\n                    ref={includeCommentsRef}\n                    id=\"include-comments\"\n                    name=\"comments\"\n                    label={t('option.print.includeComments')}\n                    onChange={() => setIncludeComments((prevState) => !prevState)}\n                    disabled={isPrinting}\n                    checked={includeComments}\n                    center\n                  />\n                  <Choice\n                    dataElement=\"annotationsPrintOption\"\n                    id=\"include-annotations\"\n                    name=\"annotations\"\n                    label={t('option.print.includeAnnotations')}\n                    disabled={isPrinting}\n                    onChange={() => setIncludeAnnotations((prevState) => !prevState)}\n                    checked={includeAnnotations}\n                    center\n                  />\n                  <Choice\n                    dataElement=\"grayscalePrintOption\"\n                    id=\"print-grayscale\"\n                    name=\"grayscale\"\n                    label={t('option.print.printGrayscale')}\n                    disabled={isPrinting}\n                    onChange={() => setIsGrayscale((prevState) => !prevState)}\n                    checked={isGrayscale}\n                    center\n                  />\n                </form>\n              </div>\n              <div className=\"section\">\n                <div className=\"section-label\">{`${t('option.print.pageQuality')}:`}</div>\n                <label className=\"printQualitySelectLabel\">\n                  <select\n                    className=\"printQualitySelect\"\n                    onChange={(e) => dispatch(actions.setPrintQuality(Number(e.target.value)))}\n                    value={printQuality}\n                  >\n                    <option value=\"2\">{`${t('option.print.qualityHigh')}`}</option>\n                    <option value=\"1\">{`${t('option.print.qualityNormal')}`}</option>\n                  </select>\n                </label>\n                <div className=\"total\">\n                  {isPrinting ? (\n                    <div>{`${t('message.processing')} ${count}/${pagesToPrint.length}`}</div>\n                  ) : (\n                    <div>{t('message.printTotalPageCount', { count: pagesToPrint.length })}</div>\n                  )}\n                </div>\n              </div>\n              {!isApplyWatermarkDisabled && (\n                <div className=\"section watermark-section\">\n                  <div className=\"section-label\">{t('option.watermark.title')}</div>\n                  <button\n                    data-element=\"applyWatermark\"\n                    className=\"apply-watermark\"\n                    disabled={isPrinting}\n                    onClick={() => {\n                      if (!isPrinting) {\n                        setWatermarkModalVisibility(true);\n                      }\n                    }}\n                  >\n                    {t('option.watermark.addNew')}\n                  </button>\n                </div>\n              )}\n            </div>\n            <div className=\"divider\"></div>\n            <div className=\"buttons\">\n              <button\n                className=\"button\"\n                onClick={createPagesAndPrint}\n                disabled={isPrinting || pagesToPrint.length < 1}\n              >\n                {t('action.print')}\n              </button>\n            </div>\n          </ModalWrapper>\n        </div>\n      </>\n    </Swipeable>\n  );\n};\n\nexport default PrintModal;\n","import PrintModal from './PrintModal';\n\nexport default PrintModal;\n"],"sourceRoot":""}
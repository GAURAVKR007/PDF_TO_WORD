{"version":3,"sources":["webpack:///./src/ui/src/components/CreateStampModal/CustomStampForums.scss?78c2","webpack:///./src/ui/src/components/CreateStampModal/CreateStampModal.scss?9a2c","webpack:///./src/ui/src/components/CreateStampModal/CustomStampForums.js","webpack:///./src/ui/src/components/CreateStampModal/CreateStampModal.js","webpack:///./src/ui/src/components/CreateStampModal/index.js"],"names":["module","exports","FALLBACK_DATE_TIME_FORMAT","date","time","timeFirst","dateTimeFormatToString","format","useDate","useTime","propTypes","state","PropTypes","object","setState","func","setEmptyInput","fonts","array","openColorPicker","getCustomColorAndRemove","openDeleteModal","dateTimeFormats","stampTool","userName","string","CustomStampForums","updateTimestampLabel","usernameChk","dateChk","dateTime","tmpText","defaultDateTimeFormat","useState","setDateTime","usernameCheckbox","setUsernameCheckbox","dateCheckbox","setDateCheckbox","timeCheckbox","setTimeCheckbox","stampTextInputValue","setStampText","t","useTranslation","txt","timestampFormat","setTimestampFormat","canvasRef","useRef","canvasContainerRef","inputRef","updateCanvas","title","subtitle","newState","parameters","canvas","current","width","height","color","textColor","canvasParent","font","bold","italic","underline","strikeout","drawCustomStamp","dataURL","toDataURL","useEffect","handleRichTextStyleChange","style","stampInputLabel","getHexColor","givenColor","A","toHexString","toLowerCase","openPicker","addNew","type","isText","getInstanceNode","instance","UI","addEventListener","Events","VISIBILITY_CHANGED","handleVisiblityChanged","e","detail","element","isVisible","colorToBeAdded","setTextColor","setBackgroundColor","toolColors","window","Core","Tools","RubberStampCreateTool","push","setTextColors","setBackgroundColors","removeEventListener","deleteColor","newColors","textColors","filter","textColorToBeDeleted","backgroundColors","backgroundColorToBeDeleted","setTextColorToBeDeleted","setBackgroundColorToBeDeleted","backgroundColor","handleTextColorChange","newColor","handleBackgroundColorChange","formatsList","dateTimeDropdownItems","Array","from","Set","map","className","ref","aria-label","substring","length","value","onChange","target","Dropdown","items","onClickItem","currentSelectionKey","getCustomItemStyle","item","fontFamily","Button","dataElement","onClick","img","isActive","ColorPalettePicker","setColorToBeDeleted","colorToBeDeleted","customColors","onStyleChange","handleColorOnClick","handleOnClick","disableTitle","enableEdit","colorsAreHex","Choice","id","checked","label","newDateTime","Icon","glyph","newFormat","i","fillColors","CustomStampModal","stampToolArray","core","getToolsFromAllDocumentViewers","store","useStore","emptyInput","useSelector","selectors","isElementOpen","DataElements","CUSTOM_STAMP_MODAL","getFonts","getDateTimeFormats","getUserName","isOpen","dispatch","useDispatch","deselectAllAnnotations","closeModal","actions","closeElement","onConfirm","message","confirmBtnText","warning","showWarningMessage","modalClass","classNames","Modal","open","closed","createCustomStamp","setToolMode","addCustomStamp","createCustomStampAnnotation","annot","setRubberStamp","showPreview","standardStampCount","getStandardStamps","customStampCount","getCustomStamps","setSelectedStampIndex","data-element","FocusTrap","locked","onMouseDown","stopPropagation","customColor","getCustomColor","getState","setCustomColor","openElement","isModalOpen","CreateStampModal"],"mappings":"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","file":"chunks/7.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LEFT_HEADER_WIDTH\":\"41px\",\"RIGHT_HEADER_WIDTH\":\"41px\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LEFT_HEADER_WIDTH\":\"41px\",\"RIGHT_HEADER_WIDTH\":\"41px\"};","import React, { useState, useEffect, useRef } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport Choice from 'components/Choice';\nimport Dropdown from 'components/Dropdown';\nimport Button from 'components/Button';\nimport Icon from 'components/Icon';\nimport ColorPalettePicker from 'components/ColorPalettePicker/ColorPalettePicker'; // ColorPalletPicker inner import required as we are not using the redux outer container\nimport Events from 'constants/events';\nimport PropTypes from 'prop-types';\n\nimport './CustomStampForums.scss';\nimport { getInstanceNode } from 'helpers/getRootNode';\n\nconst FALLBACK_DATE_TIME_FORMAT = {\n  date: 'MM/DD/YYYY',\n  time: 'hh:mm A',\n  timeFirst: false,\n};\n\nconst dateTimeFormatToString = (format, useDate = true, useTime = true) => {\n  if (!useDate) {\n    if (!format.time) {\n      return '';\n    }\n    return format.time;\n  }\n  if (!useTime) {\n    if (!format.date) {\n      return '';\n    }\n    return format.date;\n  }\n  return format.timeFirst ?\n    `${format.time} ${format.date}` :\n    `${format.date} ${format.time}`;\n};\n\nconst propTypes = {\n  state: PropTypes.object,\n  setState: PropTypes.func,\n  setEmptyInput: PropTypes.func,\n  fonts: PropTypes.array,\n  openColorPicker: PropTypes.func,\n  getCustomColorAndRemove: PropTypes.func,\n  openDeleteModal: PropTypes.func,\n  dateTimeFormats: PropTypes.array,\n  stampTool: PropTypes.object,\n  userName: PropTypes.string,\n};\n\nconst CustomStampForums = ({\n  state,\n  setState,\n  setEmptyInput,\n  fonts,\n  openColorPicker,\n  getCustomColorAndRemove,\n  openDeleteModal,\n  dateTimeFormats,\n  stampTool,\n  userName,\n}) => {\n  const updateTimestampLabel = (usernameChk, dateChk, dateTime) => {\n    let tmpText = '';\n    if (usernameChk) {\n      tmpText += '[$currentUser] ';\n    }\n    if (dateChk) {\n      tmpText += dateTime;\n    }\n    return tmpText;\n  };\n\n  const defaultDateTimeFormat = dateTimeFormats && dateTimeFormats[0] ? dateTimeFormats[0] : FALLBACK_DATE_TIME_FORMAT;\n  const [dateTime, setDateTime] = useState(dateTimeFormatToString(defaultDateTimeFormat));\n  const [usernameCheckbox, setUsernameCheckbox] = useState(true);\n  const [dateCheckbox, setDateCheckbox] = useState(true);\n  const [timeCheckbox, setTimeCheckbox] = useState(true);\n\n  const [stampTextInputValue, setStampText] = useState('Draft');\n  const [t] = useTranslation();\n\n  const txt = updateTimestampLabel(usernameCheckbox, dateCheckbox, dateTime);\n  const [timestampFormat, setTimestampFormat] = useState(txt);\n\n  const canvasRef = useRef();\n  const canvasContainerRef = useRef();\n  const inputRef = useRef();\n\n  const updateCanvas = (title, subtitle, newState = state) => {\n    const parameters = {\n      canvas: canvasRef.current,\n      title,\n      subtitle,\n      width: 300,\n      height: 100,\n      color: newState.color,\n      textColor: newState.textColor,\n      canvasParent: canvasContainerRef.current,\n      font: newState.font,\n      bold: newState.bold,\n      italic: newState.italic,\n      underline: newState.underline,\n      strikeout: newState.strikeout,\n    };\n\n    const width = stampTool.drawCustomStamp(parameters);\n    const dataURL = canvasRef.current.toDataURL();\n\n    setState({\n      ...newState,\n      width,\n      title,\n      subtitle,\n      height: parameters.height,\n      dataURL,\n    });\n  };\n\n  const handleInputChange = (e) => {\n    const value = e.target.value || '';\n    setStampText(value);\n    setEmptyInput(!value);\n    updateCanvas(value, timestampFormat);\n  };\n\n  useEffect(() => {\n    updateCanvas(stampTextInputValue, timestampFormat, state);\n  }, [userName]);\n\n  const handleDateCheckboxChange = () => {\n    setDateCheckbox(!dateCheckbox);\n    const newDateTime = dateTimeFormatToString(defaultDateTimeFormat, !dateCheckbox, timeCheckbox);\n    setDateTime(newDateTime);\n    const txt = updateTimestampLabel(usernameCheckbox, (!dateCheckbox || timeCheckbox), newDateTime);\n    setTimestampFormat(txt);\n    updateCanvas(stampTextInputValue, txt);\n  };\n\n  const handleTimeCheckboxChange = () => {\n    setTimeCheckbox(!timeCheckbox);\n    const newDateTime = dateTimeFormatToString(defaultDateTimeFormat, dateCheckbox, !timeCheckbox);\n    setDateTime(newDateTime);\n    const txt = updateTimestampLabel(usernameCheckbox, (dateCheckbox || !timeCheckbox), newDateTime);\n    setTimestampFormat(txt);\n    updateCanvas(stampTextInputValue, txt);\n  };\n\n  const handleUsernameCheckbox = () => {\n    setUsernameCheckbox(!usernameCheckbox);\n    const txt = updateTimestampLabel(!usernameCheckbox, dateCheckbox, dateTime);\n    setTimestampFormat(txt);\n    updateCanvas(stampTextInputValue, txt);\n  };\n\n  const handleFontChange = (font) => {\n    updateCanvas(stampTextInputValue, timestampFormat, {\n      ...state,\n      font,\n    });\n  };\n\n  const onDateFormatChange = (newFormat) => {\n    setDateTime(newFormat);\n    const txt = updateTimestampLabel(usernameCheckbox, (dateCheckbox || timeCheckbox), newFormat);\n    setTimestampFormat(txt);\n    updateCanvas(stampTextInputValue, txt);\n  };\n\n  const handleRichTextStyleChange = (style) => {\n    updateCanvas(stampTextInputValue, timestampFormat, {\n      ...state,\n      [style]: !state[style],\n    });\n  };\n\n  const toggleBold = () => handleRichTextStyleChange('bold');\n  const toggleItalic = () => handleRichTextStyleChange('italic');\n  const toggleStrikeout = () => handleRichTextStyleChange('strikeout');\n  const toggleUnderline = () => handleRichTextStyleChange('underline');\n\n  const stampInputLabel = t('option.customStampModal.stampText');\n\n  const getHexColor = (givenColor) => {\n    if (givenColor && givenColor.A) {\n      return givenColor.toHexString().toLowerCase();\n    }\n    return '#000000';\n  };\n  const openPicker = (addNew, type) => {\n    const isText = type === 'text';\n    openColorPicker();\n    const handleVisiblityChanged = (e) => {\n      const { element, isVisible } = e.detail;\n      if (element === 'ColorPickerModal' && !isVisible) {\n        const color = getCustomColorAndRemove();\n        if (color) {\n          const colorToBeAdded = getHexColor(color);\n          isText ? setTextColor(colorToBeAdded) : setBackgroundColor(colorToBeAdded);\n          const toolColors = window.Core.Tools.RubberStampCreateTool[isText ? 'TEXT_COLORS' : 'FILL_COLORS'];\n          toolColors.push(colorToBeAdded);\n          isText ? setTextColors(toolColors) : setBackgroundColors(toolColors);\n          state = {\n            ...state,\n            [isText ? 'textColor' : 'color']: colorToBeAdded,\n          };\n          updateCanvas(stampTextInputValue, timestampFormat, state);\n        }\n      }\n      getInstanceNode().instance.UI.removeEventListener(Events.VISIBILITY_CHANGED, handleVisiblityChanged);\n    };\n    getInstanceNode().instance.UI.addEventListener(Events.VISIBILITY_CHANGED, handleVisiblityChanged);\n  };\n  const deleteColor = (type) => {\n    const isText = type === 'text';\n    openDeleteModal(() => {\n      const newColors = isText ?\n        textColors.filter((color) => color !== textColorToBeDeleted) :\n        backgroundColors.filter((color) => color !== backgroundColorToBeDeleted);\n      isText ? setTextColors(newColors) : setBackgroundColors(newColors);\n      isText ? setTextColorToBeDeleted(null) : setBackgroundColorToBeDeleted(null);\n      window.Core.Tools.RubberStampCreateTool[isText ? 'TEXT_COLORS' : 'FILL_COLORS'] = newColors;\n    });\n  };\n\n  const [backgroundColors, setBackgroundColors] = useState(window.Core.Tools.RubberStampCreateTool['FILL_COLORS']);\n  const [backgroundColor, setBackgroundColor] = useState(state.color || window.Core.Tools.RubberStampCreateTool['FILL_COLORS'][0]);\n  const [backgroundColorToBeDeleted, setBackgroundColorToBeDeleted] = useState(null);\n\n  const [textColors, setTextColors] = useState(window.Core.Tools.RubberStampCreateTool['TEXT_COLORS']);\n  const [textColor, setTextColor] = useState(window.Core.Tools.RubberStampCreateTool['TEXT_COLORS'][0]);\n  const [textColorToBeDeleted, setTextColorToBeDeleted] = useState(null);\n\n  const openColorPickerText = (addNew) => openPicker(addNew, 'text');\n  const handleTextColorChange = (newColor) => {\n    setTextColor(newColor);\n    state = {\n      ...state,\n      textColor: newColor,\n    };\n    updateCanvas(stampTextInputValue, timestampFormat, state);\n  };\n  const handleTextColorDelete = () => deleteColor('text');\n\n  const openColorPickerBackground = (addNew) => openPicker(addNew, 'fill');\n  const handleBackgroundColorChange = (newColor) => {\n    setBackgroundColor(newColor);\n    state = {\n      ...state,\n      color: newColor,\n    };\n    updateCanvas(stampTextInputValue, timestampFormat, state);\n  };\n  const handleBackgroundColorDelete = () => deleteColor('fill');\n\n  const formatsList = dateTimeFormats || [FALLBACK_DATE_TIME_FORMAT];\n  const dateTimeDropdownItems = Array.from(new Set(\n    formatsList.map((format) => dateTimeFormatToString(format, dateCheckbox, timeCheckbox))\n  )).filter((format) => format !== '');\n\n  return (\n    <div className=\"text-customstamp\">\n      <div className=\"canvas-container\" ref={canvasContainerRef}>\n        <canvas\n          className=\"custom-stamp-canvas\"\n          ref={canvasRef}\n        />\n      </div>\n      <div className=\"scroll-container\">\n        <div className=\"stamp-input-container\">\n          <div className=\"stamp-label\"> {stampInputLabel} </div>\n          <input\n            className=\"text-customstamp-input\"\n            ref={inputRef}\n            type=\"text\"\n            aria-label={stampInputLabel.substring(0, stampInputLabel.length - 1)}\n            value={stampTextInputValue}\n            onChange={handleInputChange}\n          />\n          {\n            !stampTextInputValue\n            && (\n              <div className=\"empty-stamp-input\">\n                {t('message.emptyCustomStampInput')}\n              </div>\n            )\n          }\n        </div>\n        <div className=\"font-container\">\n          <div className=\"stamp-sublabel\"> {t('option.customStampModal.fontStyle')} </div>\n          <div className=\"font-inner-container\">\n            <Dropdown\n              items={fonts}\n              onClickItem={handleFontChange}\n              currentSelectionKey={state.font || fonts[0]}\n              getCustomItemStyle={(item) => ({ fontFamily: item })}\n            />\n            <Button\n              dataElement=\"stampTextBoldButton\"\n              onClick={toggleBold}\n              img=\"icon-menu-bold\"\n              title=\"option.richText.bold\"\n              isActive={state.bold}\n            />\n            <Button\n              dataElement=\"stampTextItalicButton\"\n              onClick={toggleItalic}\n              img=\"icon-menu-italic\"\n              title=\"option.richText.italic\"\n              isActive={state.italic}\n            />\n            <Button\n              dataElement=\"stampTextUnderlineButton\"\n              onClick={toggleUnderline}\n              img=\"icon-menu-text-underline\"\n              title=\"option.richText.underline\"\n              isActive={state.underline}\n            />\n            <Button\n              dataElement=\"stampTextStrikeoutButton\"\n              onClick={toggleStrikeout}\n              img=\"icon-tool-text-manipulation-strikethrough\"\n              title=\"option.richText.strikeout\"\n              isActive={state.strikeout}\n            />\n          </div>\n        </div>\n        <div className=\"color-container\">\n          <div className=\"stamp-sublabel\">{t('option.customStampModal.textColor')}</div>\n          <div className=\"colorpalette-container\">\n            <ColorPalettePicker\n              getHexColor={getHexColor}\n              color={textColor}\n              setColorToBeDeleted={setTextColorToBeDeleted}\n              colorToBeDeleted={textColorToBeDeleted}\n              customColors={textColors}\n              onStyleChange={setTextColor}\n              handleColorOnClick={handleTextColorChange}\n              handleOnClick={handleTextColorChange}\n              openColorPicker={openColorPickerText}\n              openDeleteModal={handleTextColorDelete}\n              disableTitle\n              enableEdit\n              colorsAreHex\n            />\n          </div>\n        </div>\n        <div className=\"color-container\">\n          <div className=\"stamp-sublabel\">{t('option.customStampModal.backgroundColor')}</div>\n          <div className=\"colorpalette-container\">\n            <ColorPalettePicker\n              getHexColor={getHexColor}\n              color={backgroundColor}\n              setColorToBeDeleted={setBackgroundColorToBeDeleted}\n              colorToBeDeleted={backgroundColorToBeDeleted}\n              customColors={backgroundColors}\n              onStyleChange={setBackgroundColor}\n              handleColorOnClick={handleBackgroundColorChange}\n              handleOnClick={handleBackgroundColorChange}\n              openColorPicker={openColorPickerBackground}\n              openDeleteModal={handleBackgroundColorDelete}\n              disableTitle\n              enableEdit\n              colorsAreHex\n            />\n          </div>\n        </div>\n        <div className=\"timestamp-container\">\n          <div className=\"stamp-sublabel\"> {t('option.customStampModal.timestampText')} </div>\n          <div className=\"timeStamp-choice\">\n            <Choice\n              id=\"default-username\"\n              checked={usernameCheckbox}\n              onChange={handleUsernameCheckbox}\n              label={t('option.customStampModal.Username')}\n            />\n            <Choice\n              id=\"default-date\"\n              checked={dateCheckbox}\n              onChange={handleDateCheckboxChange}\n              label={t('option.customStampModal.Date')}\n            />\n            <Choice\n              id=\"default-time\"\n              checked={timeCheckbox}\n              onChange={handleTimeCheckboxChange}\n              label={t('option.customStampModal.Time')}\n            />\n          </div>\n        </div>\n        {(dateCheckbox || timeCheckbox) && <div className=\"date-format-container\">\n          <div className=\"stamp-sublabel\">{t('option.customStampModal.dateFormat')}</div>\n          <div className=\"hover-icon\">\n            <Icon glyph=\"icon-info\"/>\n            <div className=\"date-format-description\">\n              <div className=\"date-format-cell\">M = {t('option.customStampModal.month')}</div>\n              <div className=\"date-format-cell\">D = {t('option.customStampModal.day')}</div>\n              <div className=\"date-format-cell\">Y = {t('option.customStampModal.year')}</div>\n              <div className=\"date-format-cell\">H = {t('option.customStampModal.hour')} (24hr)</div>\n              <div className=\"date-format-cell\">h = {t('option.customStampModal.hour')} (12hr)</div>\n              <div className=\"date-format-cell\">m = {t('option.customStampModal.minute')}</div>\n              <div className=\"date-format-cell\">s = {t('option.customStampModal.second')}</div>\n              <div className=\"date-format-cell\">A = AM/PM</div>\n            </div>\n          </div>\n          <Dropdown\n            items={dateTimeDropdownItems}\n            currentSelectionKey={dateTime}\n            onClickItem={onDateFormatChange}\n          />\n        </div>}\n      </div>\n    </div>\n  );\n};\n\nCustomStampForums.propTypes = propTypes;\n\nexport default CustomStampForums;\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { useSelector, useDispatch, useStore } from 'react-redux';\nimport { FocusTrap } from '@pdftron/webviewer-react-toolkit';\nimport core from 'core';\nimport actions from 'actions';\nimport selectors from 'selectors';\nimport { useTranslation } from 'react-i18next';\nimport CustomStampForums from './CustomStampForums';\nimport Button from 'components/Button';\nimport DataElements from 'constants/dataElement';\n\nimport './CreateStampModal.scss';\n\nconst TOOL_NAME = 'AnnotationCreateRubberStamp';\nconst fillColors = window.Core.Tools.RubberStampCreateTool['FILL_COLORS'];\n\nconst CustomStampModal = () => {\n  const [state, setState] = useState({ font: 'Helvetica', bold: true, color: fillColors[0] });\n  const stampToolArray = core.getToolsFromAllDocumentViewers(TOOL_NAME);\n  const [t] = useTranslation();\n  const store = useStore();\n  const [emptyInput, setEmptyInput] = useState(false);\n  const [isOpen, fonts, dateTimeFormats, userName] = useSelector((state) => [\n    selectors.isElementOpen(state, DataElements.CUSTOM_STAMP_MODAL),\n    selectors.getFonts(state),\n    selectors.getDateTimeFormats(state),\n    selectors.getUserName(state),\n  ]);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (isOpen) {\n      core.deselectAllAnnotations();\n    }\n  }, [isOpen]);\n\n  const closeModal = () => {\n    dispatch(actions.closeElement(DataElements.CUSTOM_STAMP_MODAL));\n  };\n\n  const openColorPicker = () => {\n    dispatch(actions.openElement('ColorPickerModal'));\n  };\n\n  const getCustomColorAndRemove = () => {\n    const customColor = selectors.getCustomColor(store.getState());\n    dispatch(actions.setCustomColor(null));\n    return customColor;\n  };\n\n  const openDeleteModal = async (onConfirm) => {\n    const message = t('warning.colorPicker.deleteMessage');\n    const title = t('warning.colorPicker.deleteTitle');\n    const confirmBtnText = t('action.ok');\n\n    const warning = {\n      message,\n      title,\n      confirmBtnText,\n      onConfirm,\n    };\n    dispatch(actions.showWarningMessage(warning));\n  };\n\n  const modalClass = classNames({\n    Modal: true,\n    CustomStampModal: true,\n    open: isOpen,\n    closed: !isOpen,\n  });\n\n  const createCustomStamp = async () => {\n    core.setToolMode(TOOL_NAME);\n    for (const stampTool of stampToolArray) {\n      stampTool.addCustomStamp(state);\n      const annot = await stampTool.createCustomStampAnnotation(state);\n      await stampTool.setRubberStamp(annot);\n      stampTool.showPreview();\n    }\n    dispatch(actions.closeElement(DataElements.CUSTOM_STAMP_MODAL));\n    const standardStampCount = stampToolArray[0].getStandardStamps().length;\n    const customStampCount = stampToolArray[0].getCustomStamps().length;\n    dispatch(actions.setSelectedStampIndex(standardStampCount + customStampCount - 1));\n  };\n\n  return (\n    isOpen ?\n      <div\n        className={modalClass}\n        data-element={DataElements.CUSTOM_STAMP_MODAL}\n      >\n        <FocusTrap locked={isOpen}>\n          <div className=\"container\" onMouseDown={(e) => e.stopPropagation()}>\n            <div className=\"header\">\n              <p>{t('option.customStampModal.modalName')}</p>\n              <Button\n                dataElement=\"customStampModalCloseButton\"\n                title=\"action.close\"\n                img=\"ic_close_black_24px\"\n                onClick={closeModal}\n              />\n            </div>\n            <CustomStampForums\n              openDeleteModal={openDeleteModal}\n              getCustomColorAndRemove={getCustomColorAndRemove}\n              openColorPicker={openColorPicker}\n              isModalOpen={isOpen}\n              state={state}\n              setState={setState}\n              closeModal={closeModal}\n              setEmptyInput={setEmptyInput}\n              fonts={fonts}\n              dateTimeFormats={dateTimeFormats}\n              stampTool={stampToolArray[0]}\n              userName={userName}\n            />\n            <div className=\"footer\">\n              <div\n                className={\n                  emptyInput\n                    ? 'stamp-create stamp-create-disabled'\n                    : 'stamp-create'\n                }\n                onClick={\n                  () => {\n                    if (emptyInput) {\n                      return;\n                    }\n                    createCustomStamp();\n                  }\n                }\n              >\n                {t('action.create')}\n              </div>\n            </div>\n          </div>\n        </FocusTrap>\n      </div>\n      :\n      null\n  );\n};\n\nexport default CustomStampModal;\n","import CreateStampModal from './CreateStampModal';\n\nexport default CreateStampModal;\n"],"sourceRoot":""}
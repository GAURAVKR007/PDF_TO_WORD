{"version":3,"sources":["webpack:///./src/ui/src/components/ScaleModal/ScaleModal.scss?e0d5","webpack:///./src/ui/src/components/ScaleModal/ScaleCustom.js","webpack:///./src/ui/src/components/ScaleModal/ScaleModal.js","webpack:///./src/ui/src/components/ScaleModal/index.js"],"names":["module","exports","Scale","window","Core","ScaleCustomProps","scale","PropTypes","array","onScaleChange","func","precision","number","ScaleCustom","measurementUnits","useSelector","state","selectors","getMeasurementUnits","shallowEqual","useState","pageValueDisplay","setPageValueDisplay","worldValueDisplay","setWorldValueDisplay","isFractionalPrecision","setIsFractionalPrecision","pageWarningMessage","setPageWarningMessage","worldWarningMessage","setWorldWarningMessage","scaleValueBlurFlag","setScaleValueBlurFlag","pageValueInput","useRef","worldValueInput","t","useTranslation","filterFractionalUnits","units","filter","unit","fractionalUnits","includes","unitFromOptions","from","unitToOptions","to","useEffect","formatDecimal","value","toFixed","toString","length","current","document","activeElement","getFormattedValue","ifFractionalPrecision","hintValues","isWorldValueValid","onInputValueChange","isPageValueValid","pageScale","newScale","worldScale","_onScaleChange","pageValueClass","classNames","worldValueClass","getPrecision","isPageValue","getNewScale","updateScaleValue","scaleValue","inputValue","trim","scaleUnit","inFractionalRegex","test","result","parseInFractional","ftInFractionalRegex","parseFtInFractional","floatRegex","parseFloat","ftInDecimalRegex","parseFtInDecimal","undefined","onScaleUnitChange","newUnit","isPageUnit","newPageScale","newWorldScale","convertUnit","getInputPlaceholder","onInputBlur","flag","className","type","min","data-element","onChange","e","target","placeholder","ref","onBlur","Tooltip","content","Dropdown","dataElement","items","onClickItem","currentSelectionKey","propTypes","scaleOptions","ScaleModal","dispatch","useDispatch","useOnMeasurementToolOrAnnotationSelected","annotations","selectedTool","isElementDisabled","DataElements","SCALE_MODAL","isElementOpen","isElementHidden","getCurrentToolbarGroup","getSelectedScale","getActiveToolName","getIsAddingNewScale","getMeasurementScalePreset","getCalibrationInfo","getIsMultipleScalesMode","isDisabled","isOpen","isHidden","currentToolbarGroup","selectedScale","activeToolName","isAddingNewScale","measurementScalePreset","tempScale","isFractionalUnit","isMultipleScalesMode","precisionOptions","PrecisionType","DECIMAL","precisionOption","setPrecisionOption","scaleOption","setScaleOption","PresetMeasurementSystems","METRIC","presetScale","setPresetScale","customScale","setCustomScale","hasScaleChanged","setHasScaleChanged","totalScalesCount","Object","keys","core","getScales","precisionType","presetMeasurementSystem","getScaleRatioAsArray","getScalePrecision","isFractional","precisionItem","getPrecisionType","find","item","setTimeout","useDidUpdate","presetPrecisionOption","scalePresetPrecision","closeModal","newPrecisionOption","actions","updateCalibrationInfo","isCalibration","initialScale","closeElement","getCurrentScale","getPrecisionsValue","temp","precisionValue","Math","round","isCustomOption","modalClass","open","closed","IMPERIAL","FRACTIONAL","isCurrentScaleValid","isValid","isFractionalUnitsToggleDisabled","onSwipedUp","onSwipedDown","preventDefaultTouchmoveEvent","FocusTrap","locked","Button","title","img","onClick","Choice","radio","name","checked","label","center","onMouseDown","setToolMode","previousToolName","defaultUnit","setIsElementHidden","map","_item","i","isSwitch","leftLabel","id","disabled","DataElementWrapper","originalScales","replaceScales","applyTo","createAndApplyScale"],"mappings":"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","file":"chunks/15.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LEFT_HEADER_WIDTH\":\"41px\",\"RIGHT_HEADER_WIDTH\":\"41px\"};","import React, { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { useSelector, shallowEqual } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport selectors from 'selectors';\nimport Tooltip from '../Tooltip';\nimport Dropdown from '../Dropdown';\nimport {\n  ifFractionalPrecision,\n  hintValues,\n  convertUnit,\n  fractionalUnits,\n  floatRegex,\n  inFractionalRegex,\n  ftInFractionalRegex,\n  ftInDecimalRegex,\n  parseFtInDecimal,\n  parseInFractional,\n  parseFtInFractional\n} from 'constants/measurementScale';\nimport classNames from 'classnames';\n\nconst Scale = window.Core.Scale;\n\nconst ScaleCustomProps = {\n  scale: PropTypes.array,\n  onScaleChange: PropTypes.func,\n  precision: PropTypes.number\n};\n\nfunction ScaleCustom({ scale, onScaleChange, precision }) {\n  const [measurementUnits] = useSelector((state) => [selectors.getMeasurementUnits(state)], shallowEqual);\n  const [pageValueDisplay, setPageValueDisplay] = useState('');\n  const [worldValueDisplay, setWorldValueDisplay] = useState('');\n  const [isFractionalPrecision, setIsFractionalPrecision] = useState(false);\n  const [pageWarningMessage, setPageWarningMessage] = useState('');\n  const [worldWarningMessage, setWorldWarningMessage] = useState('');\n  const [scaleValueBlurFlag, setScaleValueBlurFlag] = useState(false);\n\n  const pageValueInput = useRef(null);\n  const worldValueInput = useRef(null);\n\n  const [t] = useTranslation();\n\n  const filterFractionalUnits = (units) => units.filter((unit) => fractionalUnits.includes(unit));\n  const unitFromOptions = isFractionalPrecision ? filterFractionalUnits(measurementUnits.from) : measurementUnits.from;\n  const unitToOptions = isFractionalPrecision ? filterFractionalUnits(measurementUnits.to) : measurementUnits.to;\n\n  useEffect(() => {\n    const formatDecimal = (value) => {\n      return value?.toFixed((1 / precision).toString().length - 1);\n    };\n\n    if (scale[0][0] && pageValueInput?.current !== document.activeElement) {\n      if (!isFractionalPrecision) {\n        setPageValueDisplay(formatDecimal(scale[0][0]) || '');\n      } else {\n        setPageValueDisplay(Scale.getFormattedValue(scale[0][0], scale[0][1], precision, false, true) || '');\n      }\n    }\n    if (scale[1][0] && !(worldValueInput && worldValueInput.current === document.activeElement)) {\n      if (!isFractionalPrecision && scale[1][1] !== 'ft-in') {\n        setWorldValueDisplay(formatDecimal(scale[1][0]) || '');\n      } else {\n        setWorldValueDisplay(Scale.getFormattedValue(scale[1][0], scale[1][1], precision, false, true) || '');\n      }\n    }\n  }, [scale, precision, worldValueInput, pageValueInput, isFractionalPrecision, scaleValueBlurFlag]);\n\n  useEffect(() => {\n    setIsFractionalPrecision(ifFractionalPrecision(precision));\n  }, [precision]);\n\n  useEffect(() => {\n    if (isFractionalPrecision) {\n      setPageWarningMessage(hintValues[scale[0][1]]);\n      setWorldWarningMessage(hintValues[scale[1][1]]);\n    } else if (scale[1][1] === 'ft-in') {\n      setPageWarningMessage('');\n      setWorldWarningMessage(hintValues['ft-in decimal']);\n    } else {\n      setPageWarningMessage('');\n      setWorldWarningMessage('');\n    }\n  }, [scale, isFractionalPrecision]);\n\n  // Re-validate invalid world value input when world unit changes\n  useEffect(() => {\n    !isWorldValueValid && onInputValueChange(worldValueInput.current.value, false);\n  }, [scale[1][1]]);\n\n  // Re-validate invalid scale value input when isFractionalPrecision value changes\n  useEffect(() => {\n    if (!isPageValueValid && !isWorldValueValid) {\n      let pageScale = {\n        value: scale[0][0],\n        unit: scale[0][1]\n      };\n      onInputValueChange(pageValueInput.current.value, true, (newScale) => {\n        pageScale = newScale.pageScale;\n      });\n      let worldScale = {\n        value: scale[1][0],\n        unit: scale[1][1]\n      };\n      onInputValueChange(worldValueInput.current.value, false, (newScale) => {\n        worldScale = newScale.worldScale;\n      });\n\n      _onScaleChange(new Scale({ pageScale, worldScale }));\n    } else {\n      !isPageValueValid && onInputValueChange(pageValueInput.current.value, true);\n      !isWorldValueValid && onInputValueChange(worldValueInput.current.value, false);\n    }\n  }, [isFractionalPrecision]);\n\n  const isPageValueValid = !!scale[0][0];\n  const isWorldValueValid = !!scale[1][0];\n\n  const pageValueClass = classNames('scale-input', {\n    'invalid-value': !isPageValueValid\n  });\n  const worldValueClass = classNames('scale-input', {\n    'invalid-value': !isWorldValueValid\n  });\n\n  // If scale value is smaller than the current precision, replace it with precision value to prevent 0 value.\n  const _onScaleChange = (newScale) => {\n    const getPrecision = (unit) => (unit === 'ft-in' ? precision / 12 : precision);\n\n    if (newScale.pageScale.value && newScale.pageScale.value < precision) {\n      newScale.pageScale.value = getPrecision(newScale.pageScale.unit);\n    }\n    if (newScale.worldScale.value && newScale.worldScale.value < precision) {\n      newScale.worldScale.value = getPrecision(newScale.worldScale.unit);\n    }\n    onScaleChange(newScale);\n  };\n\n  const onInputValueChange = (value, isPageValue, getNewScale) => {\n    const updateScaleValue = (scaleValue) => {\n      if ((isPageValue && scaleValue !== scale[0][0]) || (!isPageValue && scaleValue !== scale[1][0])) {\n        const newScale = new Scale({\n          pageScale: { value: isPageValue ? scaleValue : scale[0][0], unit: scale[0][1] },\n          worldScale: { value: !isPageValue ? scaleValue : scale[1][0], unit: scale[1][1] }\n        });\n        if (getNewScale) {\n          getNewScale(newScale);\n        } else {\n          _onScaleChange(newScale);\n        }\n      }\n    };\n\n    if (isPageValue) {\n      setPageValueDisplay(value);\n    } else {\n      setWorldValueDisplay(value);\n    }\n    const inputValue = value.trim();\n    if (!isFractionalPrecision) {\n      if (!isPageValue && scale[1][1] === 'ft-in') {\n        if (ftInDecimalRegex.test(inputValue)) {\n          const result = parseFtInDecimal(inputValue);\n          if (result > 0) {\n            updateScaleValue(result);\n            return;\n          }\n        }\n      } else if (floatRegex.test(inputValue)) {\n        const scaleValue = parseFloat(inputValue) || 0;\n        updateScaleValue(scaleValue);\n        return;\n      }\n    } else {\n      const scaleUnit = isPageValue ? scale[0][1] : scale[1][1];\n      if (scaleUnit === 'in') {\n        if (inFractionalRegex.test(inputValue)) {\n          const result = parseInFractional(inputValue);\n          if (result > 0) {\n            updateScaleValue(result);\n            return;\n          }\n        }\n      } else if (scaleUnit === 'ft-in') {\n        if (ftInFractionalRegex.test(inputValue)) {\n          const result = parseFtInFractional(inputValue);\n          if (result > 0) {\n            updateScaleValue(result);\n            return;\n          }\n        }\n      }\n    }\n    updateScaleValue(undefined);\n  };\n\n  const onScaleUnitChange = (newUnit, isPageUnit) => {\n    let newPageScale;\n    if (isPageUnit && newUnit !== scale[0][1]) {\n      newPageScale = {\n        value: scale[0][0] ? convertUnit(scale[0][0], scale[0][1], newUnit) : scale[0][0],\n        unit: newUnit\n      };\n    } else {\n      newPageScale = { value: scale[0][0], unit: scale[0][1] };\n    }\n    let newWorldScale;\n    if (!isPageUnit && newUnit !== scale[1][1]) {\n      newWorldScale = {\n        value: scale[1][0] ? convertUnit(scale[1][0], scale[1][1], newUnit) : scale[1][0],\n        unit: newUnit\n      };\n    } else {\n      newWorldScale = { value: scale[1][0], unit: scale[1][1] };\n    }\n\n    _onScaleChange(new Scale({ pageScale: newPageScale, worldScale: newWorldScale }));\n  };\n\n  const getInputPlaceholder = (isPageValue) => {\n    const unit = isPageValue ? scale[0][1] : scale[1][1];\n    return isFractionalPrecision ? hintValues[unit] : (unit === 'ft-in' ? hintValues['ft-in decimal'] : '');\n  };\n\n  const onInputBlur = () => {\n    setScaleValueBlurFlag((flag) => !flag);\n  };\n\n  return (\n    <div className=\"custom-scale-container\">\n      <div className=\"scale-ratio-input-container\">\n        <div className=\"scale-ratio-display\">\n          <div className=\"input-wrapper\">\n            <input\n              type={isFractionalPrecision ? 'text' : 'number'}\n              min=\"0\"\n              className={pageValueClass}\n              value={pageValueDisplay}\n              data-element=\"customPageScaleValue\"\n              onChange={(e) => onInputValueChange(e.target.value, true)}\n              placeholder={getInputPlaceholder(true)}\n              ref={pageValueInput}\n              onBlur={onInputBlur}\n            />\n            <Tooltip content={'option.measurement.scaleModal.paperUnits'}>\n              <div className=\"unit-input\">\n                <Dropdown\n                  dataElement=\"customPageScaleUnit\"\n                  items={unitFromOptions}\n                  onClickItem={(value) => onScaleUnitChange(value, true)}\n                  currentSelectionKey={scale[0][1]}\n                />\n              </div>\n            </Tooltip>\n          </div>\n          {' = '}\n          <div className=\"input-wrapper\">\n            <input\n              type={(isFractionalPrecision || scale[1][1] === 'ft-in') ? 'text' : 'number'}\n              min='0'\n              className={worldValueClass}\n              value={worldValueDisplay}\n              data-element=\"customDisplayScaleValue\"\n              onChange={(e) => onInputValueChange(e.target.value, false)}\n              placeholder={getInputPlaceholder(false)}\n              ref={worldValueInput}\n              onBlur={onInputBlur}\n            />\n            <Tooltip content={'option.measurement.scaleModal.displayUnits'}>\n              <div className=\"unit-input\">\n                <Dropdown\n                  items={unitToOptions}\n                  dataElement=\"customDisplayScaleUnit\"\n                  onClickItem={(value) => onScaleUnitChange(value, false)}\n                  currentSelectionKey={scale[1][1]}\n                />\n              </div>\n            </Tooltip>\n          </div>\n        </div>\n      </div>\n      <div className=\"warning-messages\">\n        {!isPageValueValid && (\n          <div>\n            {`${t('option.measurement.scaleModal.incorrectSyntax')} ${pageWarningMessage}`}\n          </div>\n        )}\n        {!isWorldValueValid && (\n          <div className=\"world-value-warning\">\n            {`${t('option.measurement.scaleModal.incorrectSyntax')} ${worldWarningMessage}`}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\nScaleCustom.propTypes = ScaleCustomProps;\n\nexport default ScaleCustom;\n","import React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport { Swipeable } from 'react-swipeable';\nimport { Choice, FocusTrap } from '@pdftron/webviewer-react-toolkit';\nimport classNames from 'classnames';\nimport {\n  precisionOptions,\n  PrecisionType,\n  scalePresetPrecision,\n  PresetMeasurementSystems,\n  fractionalUnits,\n  ifFractionalPrecision,\n  initialScale\n} from 'constants/measurementScale';\nimport core from 'core';\nimport useOnMeasurementToolOrAnnotationSelected from 'hooks/useOnMeasurementToolOrAnnotationSelected';\nimport actions from 'actions';\nimport selectors from 'selectors';\nimport ScaleCustom from './ScaleCustom';\nimport DataElements from 'constants/dataElement';\nimport useDidUpdate from 'hooks/useDidUpdate';\nimport Button from 'components/Button';\nimport Dropdown from 'components/Dropdown';\nimport Tooltip from 'components/Tooltip';\nimport DataElementWrapper from 'components/DataElementWrapper';\n\nimport './ScaleModal.scss';\n\nconst Scale = window.Core.Scale;\n\nexport const scaleOptions = {\n  CUSTOM: 'custom',\n  PRESET: 'preset'\n};\n\nconst ScaleModal = () => {\n  const dispatch = useDispatch();\n  const [t] = useTranslation();\n\n  const { annotations, selectedTool } = useOnMeasurementToolOrAnnotationSelected();\n\n  const [\n    isDisabled,\n    isOpen,\n    isHidden,\n    currentToolbarGroup,\n    selectedScale,\n    activeToolName,\n    isAddingNewScale,\n    measurementScalePreset,\n    { tempScale, isFractionalUnit },\n    isMultipleScalesMode\n  ] = useSelector((state) => [\n    selectors.isElementDisabled(state, DataElements.SCALE_MODAL),\n    selectors.isElementOpen(state, DataElements.SCALE_MODAL),\n    selectors.isElementHidden(state, DataElements.SCALE_MODAL),\n    selectors.getCurrentToolbarGroup(state),\n    selectors.getSelectedScale(state),\n    selectors.getActiveToolName(state),\n    selectors.getIsAddingNewScale(state),\n    selectors.getMeasurementScalePreset(state),\n    selectors.getCalibrationInfo(state),\n    selectors.getIsMultipleScalesMode(state)\n  ]);\n\n  const [isFractionalPrecision, setIsFractionalPrecision] = useState(false);\n  const [precisionOption, setPrecisionOption] = useState(precisionOptions[PrecisionType.DECIMAL][0]);\n  const [scaleOption, setScaleOption] = useState(scaleOptions.CUSTOM);\n  const [presetScale, setPresetScale] = useState(measurementScalePreset[PresetMeasurementSystems.METRIC][0]);\n  const [customScale, setCustomScale] = useState(new Scale(''));\n  const [hasScaleChanged, setHasScaleChanged] = useState(false);\n\n  const totalScalesCount = Object.keys(core.getScales()).length;\n\n  useEffect(() => {\n    if (!precisionOptions[precisionType].includes(precisionOption)) {\n      setPrecisionOption(precisionOptions[precisionType][0]);\n    }\n    setPresetScale(measurementScalePreset[presetMeasurementSystem][0]);\n  }, [isFractionalPrecision]);\n\n  useEffect(() => {\n    setScaleOption(scaleOptions.CUSTOM);\n    setCustomScale(new Scale(selectedScale.getScaleRatioAsArray()));\n\n    const precision = core.getScalePrecision(selectedScale);\n    if (!precision) {\n      return;\n    }\n    const isFractional = ifFractionalPrecision(precision);\n    setIsFractionalPrecision(isFractional);\n\n    const precisionItems = precisionOptions[getPrecisionType(isFractional)];\n    const precisionItem = precisionItems.find((item) => item[1] === precision);\n    setPrecisionOption(precisionItem);\n\n    // Update/Create button should be disabled until the user makes a change\n    setTimeout(() => {\n      setHasScaleChanged(false);\n    });\n  }, [selectedScale]);\n\n  useDidUpdate(() => {\n    if (scaleOption === scaleOptions.CUSTOM) {\n      setCustomScale(presetScale[1]);\n    } else {\n      const presetPrecisionOption = scalePresetPrecision[presetScale[0]];\n      if (presetPrecisionOption && presetPrecisionOption !== precisionOption) {\n        setPrecisionOption(presetPrecisionOption);\n      }\n    }\n  }, [scaleOption]);\n\n  useDidUpdate(() => {\n    if (currentToolbarGroup === 'toolbarGroup-Measure') {\n      closeModal();\n    }\n  }, [currentToolbarGroup]);\n\n  useEffect(() => {\n    const newPrecisionOption = scalePresetPrecision[presetScale[0]];\n    if (newPrecisionOption && scaleOption === scaleOptions.PRESET) {\n      setPrecisionOption(newPrecisionOption);\n    }\n  }, [presetScale]);\n\n  useEffect(() => {\n    if (!isHidden && tempScale) {\n      // Triggered when calibration is applied\n      setCustomScale(new Scale(tempScale));\n      dispatch(actions.updateCalibrationInfo({ isCalibration: false }));\n      setIsFractionalPrecision(isFractionalUnit);\n    }\n  }, [isHidden]);\n\n  useEffect(() => {\n    setHasScaleChanged(true);\n  }, [precisionOption, customScale, presetScale, scaleOption]);\n\n  useEffect(() => {\n    // Reset component state when adding new scale\n    if (isOpen && isAddingNewScale && !tempScale) {\n      setScaleOption(scaleOptions.CUSTOM);\n      setCustomScale(initialScale);\n      setIsFractionalPrecision(false);\n      setPrecisionOption(precisionOptions[PrecisionType.DECIMAL][0]);\n    }\n  }, [isOpen, isAddingNewScale]);\n\n  const closeModal = () => {\n    dispatch(actions.closeElement(DataElements.SCALE_MODAL));\n  };\n\n  const createAndApplyScale = (scale, applyTo) => {\n    core.createAndApplyScale(scale, applyTo);\n    closeModal();\n  };\n\n  const replaceScales = (originalScales, scale) => {\n    core.replaceScales(originalScales, scale);\n    closeModal();\n  };\n\n  const toggleFractionalPrecision = () => {\n    setIsFractionalPrecision((isFractionalPrecision) => !isFractionalPrecision);\n  };\n\n  const openCalibrationTool = () => {\n    core.setToolMode('AnnotationCreateCalibrationMeasurement');\n    const unit = isCustomOption ? (customScale.worldScale?.unit || '') : presetScale[1].worldScale.unit;\n    dispatch(actions.updateCalibrationInfo({ isCalibration: true, previousToolName: activeToolName, defaultUnit: unit }));\n    dispatch(actions.setIsElementHidden(DataElements.SCALE_MODAL, true));\n  };\n\n  const getCurrentScale = () => {\n    const getPrecisionsValue = (value, unit) => {\n      let temp = value;\n      let precisionValue = precisionOption[1];\n\n      if (!isFractionalPrecision) {\n        if (unit !== 'ft-in') {\n          temp = temp.toFixed((1 / precisionValue).toString().length - 1);\n        }\n      } else {\n        if (unit === 'ft-in') {\n          precisionValue /= 12;\n        }\n        temp = Math.round(temp / precisionValue) * precisionValue;\n      }\n\n      return temp * 1;\n    };\n\n    if (isCustomOption) {\n      const scale = customScale.getScaleRatioAsArray();\n      scale[0][0] = getPrecisionsValue(scale[0][0], scale[0][1]);\n      scale[1][0] = getPrecisionsValue(scale[1][0], scale[1][1]);\n      return scale;\n    }\n    return presetScale[1].toString();\n  };\n\n  const onUpdate = () => {\n    replaceScales(\n      [selectedScale],\n      new Scale(getCurrentScale(), precisionOption[1])\n    );\n  };\n\n  const onCreate = () => {\n    createAndApplyScale(\n      new Scale(getCurrentScale(), precisionOption[1]),\n      [...annotations, selectedTool]\n    );\n  };\n\n  const modalClass = classNames('Modal', 'ScaleModal', {\n    open: !isHidden,\n    closed: isHidden\n  });\n  const isCustomOption = scaleOption === scaleOptions.CUSTOM;\n  const presetMeasurementSystem = isFractionalPrecision ? PresetMeasurementSystems.IMPERIAL : PresetMeasurementSystems.METRIC;\n  const getPrecisionType = (isFractional) => (isFractional ? PrecisionType.FRACTIONAL : PrecisionType.DECIMAL);\n  const precisionType = getPrecisionType(isFractionalPrecision);\n  const isCurrentScaleValid = !isCustomOption || customScale.isValid();\n  const isFractionalUnitsToggleDisabled = isCustomOption && !(fractionalUnits.includes(customScale.pageScale?.unit) && fractionalUnits.includes(customScale.worldScale?.unit));\n\n  return !isDisabled && (\n    <Swipeable onSwipedUp={closeModal} onSwipedDown={closeModal} preventDefaultTouchmoveEvent>\n      <FocusTrap locked={!isHidden}>\n        <div className={modalClass} data-element={DataElements.SCALE_MODAL}>\n          <div className=\"container\">\n            <div className=\"header-container\">\n              <div className=\"header\">\n                <p>{t('option.measurementOption.scale')}</p>\n                <Button\n                  className=\"scaleModalCloseButton\"\n                  title=\"action.close\"\n                  img=\"ic_close_black_24px\"\n                  onClick={closeModal}\n                />\n              </div>\n            </div>\n            <div className=\"content-container\">\n              <div className=\"scaleSetting\">\n                <div className=\"custom-option-wrapper\">\n                  <div className=\"custom-scale-option\">\n                    <Choice\n                      data-element=\"customScaleOption\"\n                      radio\n                      name=\"setting\"\n                      onChange={() => setScaleOption(scaleOptions.CUSTOM)}\n                      checked={isCustomOption}\n                      label={`${t('option.measurement.scaleModal.custom')}:`}\n                      center\n                    />\n                  </div>\n                  {isCustomOption && (\n                    <button data-element=\"calibrate\" className=\"calibrate-btn\" onMouseDown={openCalibrationTool}>\n                      {t('option.measurement.scaleModal.calibrate')}\n                    </button>\n                  )}\n                </div>\n                {isCustomOption ? (\n                  <ScaleCustom\n                    scale={customScale.getScaleRatioAsArray()}\n                    onScaleChange={setCustomScale}\n                    precision={precisionOption[1]}\n                  />\n                ) : (\n                  <div className=\"block\" />\n                )}\n                <Choice\n                  data-element=\"presetScaleOption\"\n                  radio\n                  onChange={() => setScaleOption(scaleOptions.PRESET)}\n                  name=\"setting\"\n                  checked={!isCustomOption}\n                  label={`${t('option.measurement.scaleModal.preset')}:`}\n                  center\n                />\n                {!isCustomOption && (\n                  <div className=\"scaleModal__preset-container\">\n                    <div className=\"selector\">\n                      <Dropdown\n                        dataElement=\"presetScales\"\n                        items={measurementScalePreset[presetMeasurementSystem].map((item) => item[0])}\n                        currentSelectionKey={presetScale[0]}\n                        onClickItem={(_item, i) => setPresetScale(measurementScalePreset[presetMeasurementSystem][i])}\n                      />\n                    </div>\n                  </div>\n                )}\n              </div>\n              <div className=\"precision-container\">\n                <div className=\"precision-selector\">\n                  <div className=\"precision-title\">{t('option.shared.precision')}:</div>\n                  <div className=\"selector\">\n                    <Dropdown\n                      dataElement=\"scalePrecisions\"\n                      items={precisionOptions[precisionType].map((item) => item[0])}\n                      currentSelectionKey={precisionOption[0]}\n                      onClickItem={(_item, i) => setPrecisionOption(precisionOptions[precisionType][i])}\n                    />\n                  </div>\n                </div>\n                <Tooltip content={t('option.measurement.scaleModal.fractionUnitsTooltip')}>\n                  <div>\n                    <Choice\n                      isSwitch\n                      leftLabel\n                      id=\"scale-modal-fractional-units\"\n                      label={t('option.measurement.scaleModal.fractionalUnits')}\n                      checked={isFractionalPrecision}\n                      onChange={toggleFractionalPrecision}\n                      disabled={isFractionalUnitsToggleDisabled}\n                    />\n                  </div>\n                </Tooltip>\n              </div>\n            </div>\n            <div className=\"footer\">\n              <DataElementWrapper\n                type={'button'}\n                onClick={onUpdate}\n                className=\"scale-update\"\n                dataElement=\"updateScale\"\n                disabled={isAddingNewScale || !isCurrentScaleValid || !hasScaleChanged}\n              >\n                {t('action.update')}\n              </DataElementWrapper>\n              <button\n                onClick={onCreate}\n                className=\"scale-create\"\n                data-element=\"createScale\"\n                disabled={!isCurrentScaleValid || (!isMultipleScalesMode && totalScalesCount) || (!isAddingNewScale && !hasScaleChanged)}\n              >\n                {t('action.create')}\n              </button>\n            </div>\n          </div>\n        </div>\n      </FocusTrap>\n    </Swipeable>\n  );\n};\n\nexport default ScaleModal;\n","import ScaleModal from './ScaleModal';\n\nexport default ScaleModal;"],"sourceRoot":""}
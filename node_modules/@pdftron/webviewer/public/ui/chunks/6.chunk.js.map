{"version":3,"sources":["webpack:///./src/ui/src/components/InsertPageModal/InsertBlankPagePanel/InsertBlankPagePanel.scss?825d","webpack:///./src/ui/src/components/InsertPageModal/InsertUploadedPagePanel/InsertUploadedPagePanel.scss?73ac","webpack:///./src/ui/src/components/InsertPageModal/InsertPageModal.scss?7e18","webpack:///./src/ui/src/components/InsertPageModal/InsertBlankPagePanel/IncrementNumberInput.js","webpack:///./src/ui/src/components/DimensionInput/DimensionInput.js","webpack:///./src/ui/src/components/DimensionInput/index.js","webpack:///./src/ui/src/components/InsertPageModal/InsertBlankPagePanel/InsertBlankPagePanel.js","webpack:///./src/ui/src/components/InsertPageModal/InsertBlankPagePanel/index.js","webpack:///./src/ui/src/components/InsertPageModal/InsertUploadedPagePanel/InsertUploadedPagePanel.js","webpack:///./src/ui/src/components/InsertPageModal/InsertUploadedPagePanel/InsertUploadedPagePanelContainer.js","webpack:///./src/ui/src/components/InsertPageModal/InsertUploadedPagePanel/index.js","webpack:///./src/ui/src/components/InsertPageModal/InsertPageModal.js","webpack:///./src/ui/src/components/InsertPageModal/InsertPageModalContainer.js","webpack:///./src/ui/src/components/InsertPageModal/index.js"],"names":["module","exports","IncrementNumberInput","className","min","onChange","value","fillWidth","useState","number","setNumber","classNames","incrementNumberInput","Input","type","e","parseInt","target","onClick","Icon","glyph","DimensionInput","label","initialValue","unit","maxLength","disabled","setValue","dimensionInput","step","style","width","input","length","toString","decimalSize","isIE11","includes","resizeInput","InsertBlankPagePanel","insertNewPageBelow","insertNewPageIndexes","numberOfBlankPagesToInsert","setInsertNewPageBelow","setInsertNewPageIndexes","setNumberOfBlankPagesToInsert","setInsertPageHeight","setInsertPageWidth","loadedDocumentPageCount","presetNewPageDimensions","useSelector","state","selectors","getPresetNewPageDimensions","t","useTranslation","presetPageDimensions","Object","keys","pagePlacementOptions","supportedUnits","unitConversions","selectedPageDimensions","setSelectedPageDimensions","openCustomDimensions","setOpenCustomDimensions","getOwnPropertyNames","units","setUnits","customWidth","setCustomWidth","height","customHeight","setCustomHeight","pageNumberError","setPageNumberError","useEffect","Choice","name","checked","radio","PageNumberInput","selectedPageNumbers","pageCount","onBlurHandler","pageNumbers","onError","pageNumber","amount","Selector","selectedItem","onItemSelected","dimensions","items","visibility","display","InsertUploadedPagePanel","React","forwardRef","ref","sourceDocument","closeModal","clearLoadedFile","insertPages","closeModalWarning","selectedThumbnails","setSelectedThumbnails","isLoading","setIsLoading","pageNumberToInsertAt","setPageNumberToInsertAt","insertAbove","setInsertAbove","getPageCount","selectedPages","i","getSelectedPages","reduce","currentPage","push","onInsertChoiceChange","onMouseDown","stopPropagation","Button","img","dataElement","title","PageThumbnailsGrid","document","onThumbnailSelected","undefined","onfileLoadedHandler","isFileSelected","insertAtPage","insertBeforeThisPage","displayName","InsertUploadedPagePanelContainer","props","dispatch","useDispatch","exitPageInsertionWarning","options","loadAsPDF","l","window","sampleL","InsertPageModal","getSelectedThumbnailPageIndexes","getCurrentPage","getSelectedTab","DataElements","INSERT_PAGE_MODAL","selectedPageIndexes","selectedTab","selectedDoc","setSelectedDoc","insertPageHeight","insertPageWidth","map","isUploadPagePanelActive","insertBlankPageProps","actions","closeElement","apply","insertBelow","page","index","fileProcessedHandler","file","instance","Core","Document","core","createDocument","console","error","clearDocument","modalClass","Modal","open","onSwipedUp","onSwipedDown","preventDefaultTouchmoveEvent","data-element","FocusTrap","locked","INSERT_FROM_FILE_TAB","Tabs","id","INSERT_BLANK_PAGE_TAB","INSERT_BLANK_PAGE_PANEL","INSERT_FROM_FILE_PANEL","FilePickerPanel","fileInputId","onFileProcessed","InsertPageModalContainer","isElementDisabled","isElementOpen","isDisabled","isOpen","getTotalPages"],"mappings":"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","file":"chunks/6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LEFT_HEADER_WIDTH\":\"41px\",\"RIGHT_HEADER_WIDTH\":\"41px\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LEFT_HEADER_WIDTH\":\"41px\",\"RIGHT_HEADER_WIDTH\":\"41px\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LEFT_HEADER_WIDTH\":\"41px\",\"RIGHT_HEADER_WIDTH\":\"41px\"};","import React, { useState } from 'react';\nimport { Input } from '@pdftron/webviewer-react-toolkit';\nimport Icon from 'components/Icon';\nimport classNames from 'classnames';\n\nconst IncrementNumberInput = ({ className, min, onChange, value, fillWidth }) => {\n  const [number, setNumber] = useState(value);\n\n  const incrementNumber = () => {\n    onChange(number + 1);\n    setNumber(number + 1);\n  };\n\n  const decrementNumber = () => {\n    onChange(number - 1);\n    setNumber(number - 1);\n  };\n\n  const handleChange = (e) => {\n    onChange(parseInt(e.target.value));\n    setNumber(parseInt(e.target.value));\n  };\n\n  return (\n    <div className={classNames({\n      incrementNumberInput: true,\n      [className]: !!className,\n    })}>\n      <Input type=\"number\" min={min} onChange={handleChange} value={number} fillWidth={fillWidth} />\n      <div className=\"increment-buttons\">\n        <button className=\"increment-arrow-button\" onClick={incrementNumber}>\n          <Icon className=\"up-arrow\" glyph={'icon-chevron-up'} />\n        </button>\n        <button className=\"increment-arrow-button\" onClick={decrementNumber}>\n          <Icon className=\"down-arrow\" glyph={'icon-chevron-down'} />\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default IncrementNumberInput;\n","import React, { useState } from 'react';\nimport { isIE11 } from 'helpers/device';\nimport classNames from 'classnames';\n\nimport './DimensionInput.scss';\n\nconst DimensionInput = ({ className, label, initialValue, onChange, unit, maxLength = 10, disabled }) => {\n  const [value, setValue] = useState(initialValue);\n\n  const handleDimensionChange = (e) => {\n    setValue(e.target.value);\n    onChange(e.target.value);\n  };\n\n  // Resizes number input boxes so that units of measurement can be shown next to them as if they are also in the same box\n  const resizeInput = (input) => {\n    let length = input.toString().length;\n    let decimalSize = 0.3;\n    if (isIE11) {\n      const IE_ADJUSTMENT = 1.25;\n      length *= IE_ADJUSTMENT;\n      maxLength *= IE_ADJUSTMENT;\n      decimalSize *= IE_ADJUSTMENT;\n    }\n    if (input.toString().includes('.')) {\n      length -= decimalSize;\n    } else {\n      length += decimalSize;\n    }\n    if (length > maxLength) {\n      return maxLength;\n    }\n    return length;\n  };\n\n  return (\n    <div className={classNames({\n      dimensionInput: true,\n      [className]: !!className,\n    })}>\n      <label className=\"dimension-input-label\">\n        {label}\n        <div className=\"dimension-input-container\">\n          <input\n            className=\"dimension-input\"\n            type=\"number\"\n            min=\"0\"\n            step={0.01}\n            onChange={handleDimensionChange}\n            disabled={disabled}\n            style={{ width: `${resizeInput(value)}ch` }}\n            value={value}\n          />\n          <span className=\"dimension-unit\">\n            {value > 0 && unit}\n          </span>\n        </div>\n      </label>\n    </div>\n  );\n};\n\nexport default DimensionInput;\n","import DimensionInput from './DimensionInput';\n\nexport default DimensionInput;","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\nimport selectors from 'selectors';\nimport { Choice } from '@pdftron/webviewer-react-toolkit';\nimport PageNumberInput from 'components/PageReplacementModal/PageNumberInput';\nimport Selector from 'components/Selector';\nimport IncrementNumberInput from './IncrementNumberInput';\nimport DimensionInput from 'components/DimensionInput';\n\nimport { useTranslation } from 'react-i18next';\n\nimport './InsertBlankPagePanel.scss';\n\nconst InsertBlankPagePanel = ({\n  insertNewPageBelow,\n  insertNewPageIndexes,\n  numberOfBlankPagesToInsert,\n  setInsertNewPageBelow,\n  setInsertNewPageIndexes,\n  setNumberOfBlankPagesToInsert,\n  setInsertPageHeight,\n  setInsertPageWidth,\n  loadedDocumentPageCount,\n}) => {\n  const [presetNewPageDimensions] = useSelector((state) => [\n    selectors.getPresetNewPageDimensions(state),\n  ]);\n\n  const [t] = useTranslation();\n\n  const presetPageDimensions = Object.keys(presetNewPageDimensions);\n\n  const CUSTOM_PAGE_DIMENSIONS = 'Custom';\n\n  const pagePlacementOptions = {\n    'ABOVE': 'above',\n    'BELOW': 'below',\n  };\n\n  const supportedUnits = {\n    'Inches (in)': '\"',\n    'Centimeters (cm)': 'cm',\n    'Millimeters (mm)': 'mm',\n  };\n\n  const PT_TO_INCHES = 72;\n\n  const unitConversions = {\n    '\"': 1,\n    'cm': 2.54,\n    'mm': 25.4,\n    'pt': PT_TO_INCHES,\n  };\n\n  const [selectedPageDimensions, setSelectedPageDimensions] = useState(presetPageDimensions[0]);\n  const [openCustomDimensions, setOpenCustomDimensions] = useState(false);\n  const [units, setUnits] = useState(Object.getOwnPropertyNames(supportedUnits)[0]);\n  const [customWidth, setCustomWidth] = useState(presetNewPageDimensions[presetPageDimensions[0]].width);\n  const [customHeight, setCustomHeight] = useState(presetNewPageDimensions[presetPageDimensions[0]].height);\n  const [pageNumberError, setPageNumberError] = useState('');\n\n  useEffect(() => {\n    setInsertPageWidth(presetNewPageDimensions[selectedPageDimensions].width * PT_TO_INCHES);\n    setInsertPageHeight(presetNewPageDimensions[selectedPageDimensions].height * PT_TO_INCHES);\n  }, []);\n\n  const handlePageNumberError = (pageNumber) => {\n    if (pageNumber) {\n      setPageNumberError(`${t('message.errorPageNumber')} ${loadedDocumentPageCount}`);\n    }\n  };\n\n  const insertNewPagePlacementAbove = () => {\n    setInsertNewPageBelow(false);\n  };\n\n  const insertNewPagePlacementBelow = () => {\n    setInsertNewPageBelow(true);\n  };\n\n  const handlePageNumbersChanged = (pageNumbers) => {\n    setPageNumberError(null);\n    setInsertNewPageIndexes(pageNumbers);\n  };\n\n  const handleAmountOfPagesChanged = (amount) => {\n    setNumberOfBlankPagesToInsert(amount);\n  };\n\n  const handleUnitsChanged = (units) => {\n    setUnits(units);\n    setInsertPageWidth(customWidth * (PT_TO_INCHES / unitConversions[supportedUnits[units]]));\n    setInsertPageHeight(customHeight * (PT_TO_INCHES / unitConversions[supportedUnits[units]]));\n  };\n\n  const handlePageDimensionsChanged = (dimensions) => {\n    if (dimensions === CUSTOM_PAGE_DIMENSIONS) {\n      setOpenCustomDimensions(true);\n      setInsertPageWidth(customWidth * (PT_TO_INCHES / unitConversions[supportedUnits[units]]));\n      setInsertPageHeight(customHeight * (PT_TO_INCHES / unitConversions[supportedUnits[units]]));\n    } else {\n      setInsertPageWidth(presetNewPageDimensions[dimensions].width * PT_TO_INCHES);\n      setInsertPageHeight(presetNewPageDimensions[dimensions].height * PT_TO_INCHES);\n      setOpenCustomDimensions(false);\n    }\n    setSelectedPageDimensions(dimensions);\n  };\n\n  const handleBlankPageWidthChange = (width) => {\n    setCustomWidth(width);\n    setInsertPageWidth(width * (PT_TO_INCHES / unitConversions[supportedUnits[units]]));\n  };\n\n  const handleBlankPageHeightChange = (height) => {\n    setCustomHeight(height);\n    setInsertPageHeight(height * (PT_TO_INCHES / unitConversions[supportedUnits[units]]));\n  };\n\n  return (\n    <div className=\"insert-blank-page-panel\">\n      <div className=\"panel-container\">\n        <div className=\"subheader\">{t('insertPageModal.pagePlacements.header')}</div>\n        <div className=\"section\">\n          <Choice\n            label={t(`insertPageModal.pagePlacements.${pagePlacementOptions.ABOVE}`)}\n            name=\"PAGE_PLACEMENT\"\n            onChange={insertNewPagePlacementAbove}\n            checked={!insertNewPageBelow}\n            radio\n          />\n          <Choice\n            label={t(`insertPageModal.pagePlacements.${pagePlacementOptions.BELOW}`)}\n            name=\"PAGE_PLACEMENT\"\n            onChange={insertNewPagePlacementBelow}\n            checked={insertNewPageBelow}\n            radio\n          />\n        </div>\n        <div className=\"subheader\">{t('insertPageModal.pageLocations.header')}</div>\n        <div className=\"section\">\n          <div className=\"input-container\">\n            <p>{t('insertPageModal.pageLocations.specify')}</p>\n            <PageNumberInput\n              selectedPageNumbers={insertNewPageIndexes}\n              pageCount={loadedDocumentPageCount}\n              onBlurHandler={handlePageNumbersChanged}\n              onError={handlePageNumberError}\n            />\n            <p className=\"input-sub-text\">\n              {t('insertPageModal.pageLocations.total')} {loadedDocumentPageCount}{' '}\n              {t('insertPageModal.pageLocations.pages')}\n            </p>\n            {pageNumberError && <div className=\"page-number-error\">{pageNumberError}</div>}\n          </div>\n          <div className=\"input-container\">\n            <p>{t('insertPageModal.pageLocations.amount')}</p>\n            <IncrementNumberInput\n              type=\"number\"\n              min=\"1\"\n              onChange={handleAmountOfPagesChanged}\n              value={numberOfBlankPagesToInsert}\n              fillWidth\n            />\n          </div>\n        </div>\n        <div className=\"subheader\">{t('insertPageModal.pageDimensions.header')}</div>\n        <div className=\"section\">\n          <div className=\"input-container\">\n            <p>{t('insertPageModal.pageDimensions.subHeader')}</p>\n            <Selector\n              className='presetSelector'\n              selectedItem={selectedPageDimensions}\n              onItemSelected={handlePageDimensionsChanged}\n              items={[...presetPageDimensions, CUSTOM_PAGE_DIMENSIONS]}\n            />\n          </div>\n          <div className=\"input-container\" style={{ visibility: openCustomDimensions ? 'visible' : 'hidden' }}>\n            <p>{t('insertPageModal.pageDimensions.units')}</p>\n            <Selector\n              className='unitSelector'\n              selectedItem={units}\n              onItemSelected={handleUnitsChanged}\n              items={Object.keys(supportedUnits)}\n            />\n          </div>\n        </div>\n        <div className=\"section\" style={{ display: openCustomDimensions ? 'flex' : 'none' }}>\n          <div className=\"input-container\">\n            <p>{t('formField.formFieldPopup.width')}</p>\n            <DimensionInput className='customWidthInput' initialValue={customWidth} onChange={handleBlankPageWidthChange} unit={supportedUnits[units]} />\n          </div>\n          <div className=\"input-container\">\n            <p>{t('formField.formFieldPopup.height')}</p>\n            <DimensionInput className='customHeightInput' initialValue={customHeight} onChange={handleBlankPageHeightChange} unit={supportedUnits[units]} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InsertBlankPagePanel;\n","import InsertBlankPagePanel from './InsertBlankPagePanel';\n\nexport default InsertBlankPagePanel;","import React, { useEffect, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport classNames from 'classnames';\nimport Button from 'components/Button';\n\nimport './InsertUploadedPagePanel.scss';\nimport PageThumbnailsGrid from 'components/PageThumbnailsGrid';\nimport { Choice } from '@pdftron/webviewer-react-toolkit';\nimport PageNumberInput from 'components/PageReplacementModal/PageNumberInput';\n\nconst InsertUploadedPagePanel = React.forwardRef(({\n  sourceDocument,\n  closeModal,\n  clearLoadedFile,\n  insertPages,\n  loadedDocumentPageCount,\n  closeModalWarning,\n  insertNewPageIndexes = [1],\n}, ref) => {\n  const [t] = useTranslation();\n  const [selectedThumbnails, setSelectedThumbnails] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [pageNumberToInsertAt, setPageNumberToInsertAt] = useState([insertNewPageIndexes[0]]);\n  const [insertAbove, setInsertAbove] = useState(true);\n  const [pageNumberError, setPageNumberError] = useState('');\n\n  useEffect(() => {\n    const pageCount = sourceDocument.getPageCount();\n    const selectedPages = {};\n    for (let i = 1; i <= pageCount; i++) {\n      selectedPages[i] = true;\n    }\n    setSelectedThumbnails(selectedPages);\n  }, [sourceDocument]);\n\n\n  const onThumbnailSelected = (pageNumber) => {\n    if (selectedThumbnails[pageNumber] === undefined) {\n      selectedThumbnails[pageNumber] = true;\n    } else {\n      selectedThumbnails[pageNumber] = !selectedThumbnails[pageNumber];\n    }\n    setSelectedThumbnails({ ...selectedThumbnails });\n  };\n\n  const getSelectedPages = () => {\n    const pageNumbers = Object.keys(selectedThumbnails);\n    return pageNumbers.reduce((selectedPages, currentPage) => {\n      if (selectedThumbnails[currentPage]) {\n        selectedPages.push(parseInt(currentPage));\n      }\n      return selectedPages;\n    }, []);\n  };\n\n  const pageInputBlurHandler = (pageNumbers) => {\n    setPageNumberError(null);\n    // If undefined it means user entered an invalid number\n    // Use an array to force a re-render of the input component\n    const pageNumber = pageNumbers[0] ? [pageNumbers[0]] : [];\n    setPageNumberToInsertAt(pageNumber);\n  };\n\n  const deselectAllThumbnails = () => {\n    setSelectedThumbnails({});\n  };\n\n  const onInsertChoiceChange = () => {\n    setInsertAbove(!insertAbove);\n  };\n\n  const insertPagesHandler = () => {\n    let insertAtPage = pageNumberToInsertAt[0];\n    if (insertAtPage) {\n      let insertBeforeThisPage = insertAbove ? insertAtPage : ++insertAtPage;\n\n      if (insertBeforeThisPage > loadedDocumentPageCount) {\n        insertBeforeThisPage = null;\n      }\n\n      insertPages(sourceDocument, getSelectedPages(), insertBeforeThisPage);\n    }\n\n    closeModal();\n  };\n\n  const onCloseHandler = () => {\n    closeModalWarning();\n  };\n\n  const handlePageNumberError = (pageNumber) => {\n    if (pageNumber) {\n      setPageNumberError(`${t('message.errorPageNumber')} ${loadedDocumentPageCount}`);\n    }\n  };\n\n  return (\n    <div className=\"insert-uploaded-page-panel\" onMouseDown={(e) => e.stopPropagation()} ref={ref}>\n      <div className=\"swipe-indicator\" />\n      <div className=\"header\">\n        <div className='left-header'>\n          <Button\n            img={'icon-arrow-back'}\n            onClick={clearLoadedFile}\n            dataElement={'insertFromFileBackButton'}\n            title={t('action.back')}\n          />\n          {t('insertPageModal.selectPages')} {`(${isLoading ? 0 : getSelectedPages().length})`}\n        </div>\n        <Button className=\"insertPageModalCloseButton\" img=\"icon-close\" onClick={onCloseHandler} title=\"action.cancel\" />\n\n      </div>\n      <div className=\"modal-body\">\n        <div className=\"insert-blank-page-controls\">\n          <div className='insert-page-location-options'>\n            <span className='insert-page-titles '>{t('insertPageModal.pagePlacements.header')}</span>\n            <div className='insert-page-options'>\n              <Choice label={t('insertPageModal.pagePlacements.above')} radio name='insertPagePosition' checked={insertAbove} onChange={onInsertChoiceChange} />\n              <Choice label={t('insertPageModal.pagePlacements.below')} radio name='insertPagePosition' checked={!insertAbove} onChange={onInsertChoiceChange} />\n            </div>\n          </div>\n          <div className='insert-page-location'>\n            <span className='insert-page-titles '>{t('insertPageModal.pageLocations.specifyLocation')}</span>\n            <div className='insert-page-input'>\n              {t('insertPageModal.page')}:\n              <PageNumberInput\n                selectedPageNumbers={pageNumberToInsertAt}\n                onBlurHandler={pageInputBlurHandler}\n                pageCount={loadedDocumentPageCount}\n                onError={handlePageNumberError} />\n              {pageNumberError && <div className=\"page-number-error\">{pageNumberError}</div>}\n            </div>\n          </div>\n\n        </div>\n        <div className={classNames('modal-body-thumbnail-container', { isLoading })}>\n          <PageThumbnailsGrid\n            document={sourceDocument}\n            onThumbnailSelected={onThumbnailSelected}\n            selectedThumbnails={selectedThumbnails}\n            onfileLoadedHandler={setIsLoading} />\n        </div>\n      </div>\n      <div className={classNames('insert-page-footer', { isFileSelected: !isLoading })}>\n        <button className={classNames('deselect-thumbnails', { disabled: isLoading })} onClick={deselectAllThumbnails} disabled={isLoading}>\n          {t('action.deselectAll')}\n        </button>\n        <Button\n          className=\"modal-btn\"\n          onClick={insertPagesHandler}\n          label={t('insertPageModal.button')}\n          disabled={getSelectedPages().length === 0 || isLoading || pageNumberToInsertAt.length === 0}\n        />\n      </div>\n    </div>\n  );\n});\n\nInsertUploadedPagePanel.displayName = InsertUploadedPagePanel;\nexport default InsertUploadedPagePanel;\n","import React from 'react';\nimport InsertUploadedPagePanel from './InsertUploadedPagePanel';\nimport { insertPages, exitPageInsertionWarning } from 'helpers/pageManipulationFunctions';\nimport { useDispatch } from 'react-redux';\n\nconst InsertUploadedPagePanelContainer = React.forwardRef((props, ref) => {\n  // This makes it easier to mock the insertPages handler for testing purposes\n  const dispatch = useDispatch();\n  const { closeModal } = props;\n  const closeModalWarning = () => exitPageInsertionWarning(closeModal, dispatch);\n  return (<InsertUploadedPagePanel {...props} insertPages={insertPages} closeModalWarning={closeModalWarning} ref={ref} />);\n});\n\nInsertUploadedPagePanelContainer.displayName = 'InsertUploadedPagePanelContainer';\nexport default InsertUploadedPagePanelContainer;","import InsertUploadedPagePanel from './InsertUploadedPagePanelContainer';\n\nexport default InsertUploadedPagePanel;","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport { useSelector, useDispatch } from 'react-redux';\nimport actions from 'actions';\nimport selectors from 'selectors';\nimport { useTranslation } from 'react-i18next';\nimport DataElements from 'constants/dataElement';\nimport { Tabs, Tab, TabPanel } from 'components/Tabs';\nimport Button from 'components/Button';\nimport { FocusTrap } from '@pdftron/webviewer-react-toolkit';\nimport { Swipeable } from 'react-swipeable';\n\nimport core from 'core';\n\nimport { insertAbove, insertBelow, exitPageInsertionWarning } from '../../helpers/pageManipulationFunctions';\nimport InsertBlankPagePanel from './InsertBlankPagePanel';\nimport InsertUploadedPagePanel from './InsertUploadedPagePanel';\n\nimport FilePickerPanel from '../PageReplacementModal/FilePickerPanel';\n\nimport './InsertPageModal.scss';\n\nconst options = { loadAsPDF: true, l: window.sampleL /* license key here */ };\n\nconst InsertPageModal = ({ loadedDocumentPageCount }) => {\n  const [selectedPageIndexes, currentPage, selectedTab] = useSelector((state) => [\n    selectors.getSelectedThumbnailPageIndexes(state),\n    selectors.getCurrentPage(state),\n    selectors.getSelectedTab(state, DataElements.INSERT_PAGE_MODAL),\n  ]);\n\n  const [selectedDoc, setSelectedDoc] = useState(null);\n  const fileInputId = 'insertPageFileInputId';\n  const [insertNewPageBelow, setInsertNewPageBelow] = useState(false);\n  const [insertNewPageIndexes, setInsertNewPageIndexes] = useState([]);\n  const [numberOfBlankPagesToInsert, setNumberOfBlankPagesToInsert] = useState(1);\n  const [insertPageHeight, setInsertPageHeight] = useState(0);\n  const [insertPageWidth, setInsertPageWidth] = useState(0);\n\n  useEffect(() => {\n    const pageNumbers = selectedPageIndexes.length > 0 ? selectedPageIndexes.map((i) => i + 1) : [currentPage];\n    setInsertNewPageIndexes(pageNumbers);\n  }, [selectedPageIndexes]);\n\n  const dispatch = useDispatch();\n  const [t] = useTranslation();\n\n  const closeModal = () => {\n    dispatch(actions.closeElement(DataElements.INSERT_PAGE_MODAL));\n  };\n\n  const showCloseModalWarning = () => {\n    exitPageInsertionWarning(closeModal, dispatch);\n  };\n\n  const apply = () => {\n    if (insertNewPageBelow) {\n      for (let i = 0; i < numberOfBlankPagesToInsert; ++i) {\n        insertBelow(insertNewPageIndexes.map((page, index) => page + (index + 1) * i), insertPageWidth, insertPageHeight);\n      }\n    } else {\n      for (let i = 0; i < numberOfBlankPagesToInsert; ++i) {\n        insertAbove(insertNewPageIndexes.map((page, index) => page + (index + 1) * i), insertPageWidth, insertPageHeight);\n      }\n    }\n    closeModal();\n  };\n\n  // File picker can merge docs, in which case the callback gets\n  // executed with a Document not a file\n  const fileProcessedHandler = async (file) => {\n    let document;\n    // eslint-disable-next-line no-undef\n    if (file instanceof instance.Core.Document) {\n      document = file;\n    } else {\n      try {\n        document = await core.createDocument(file, options);\n      } catch (e) {\n        console.error('File type not supported');\n      }\n    }\n    setSelectedDoc(document);\n  };\n\n  const clearDocument = () => {\n    setSelectedDoc(null);\n  };\n\n  const renderFileSelectedPanel = () => {\n    return (\n      <InsertUploadedPagePanel\n        sourceDocument={selectedDoc}\n        closeModal={closeModal}\n        clearLoadedFile={clearDocument}\n        loadedDocumentPageCount={loadedDocumentPageCount}\n        insertNewPageIndexes={insertNewPageIndexes}\n      />\n    );\n  };\n\n  const modalClass = classNames({\n    Modal: true,\n    InsertPageModal: true,\n    open: true,\n  });\n\n  const renderSelectionTabs = () => {\n    const isUploadPagePanelActive = selectedTab === DataElements.INSERT_FROM_FILE_TAB;\n    const insertBlankPageProps = {\n      insertNewPageBelow,\n      insertNewPageIndexes,\n      numberOfBlankPagesToInsert,\n      setInsertNewPageBelow,\n      setInsertNewPageIndexes,\n      setNumberOfBlankPagesToInsert,\n      setInsertPageHeight,\n      setInsertPageWidth,\n      loadedDocumentPageCount,\n    };\n    return (\n      <div className=\"container tabs\" onClick={(e) => e.stopPropagation()} onMouseDown={(e) => e.stopPropagation()}>\n        <div className=\"swipe-indicator\" />\n        <Tabs className=\"insert-page-tabs\" id={DataElements.INSERT_PAGE_MODAL}>\n          <div className=\"header-container\">\n            <div className=\"header\">\n              <p>{t('insertPageModal.title')}</p>\n              <Button className=\"insertPageModalCloseButton\" img=\"icon-close\" onClick={closeModal} title=\"action.close\" />\n            </div>\n            <div className=\"tab-list\">\n              <Tab dataElement={DataElements.INSERT_BLANK_PAGE_TAB}>\n                <button className=\"tab-options-button\">{t('insertPageModal.tabs.blank')}</button>\n              </Tab>\n              <div className=\"tab-options-divider\" />\n              <Tab dataElement={DataElements.INSERT_FROM_FILE_TAB}>\n                <button className=\"tab-options-button\">{t('insertPageModal.tabs.upload')}</button>\n              </Tab>\n            </div>\n          </div>\n          <div className=\"divider\"></div>\n          <TabPanel dataElement={DataElements.INSERT_BLANK_PAGE_PANEL}>\n            <InsertBlankPagePanel {...insertBlankPageProps} />\n          </TabPanel>\n          <TabPanel dataElement={DataElements.INSERT_FROM_FILE_PANEL}>\n            <div className='panel-body'>\n              <FilePickerPanel\n                fileInputId={fileInputId}\n                onFileProcessed={(file) => fileProcessedHandler(file)} />\n            </div>\n          </TabPanel>\n        </Tabs>\n        <div className=\"divider\"></div>\n        <div className=\"footer\">\n          <Button\n            className=\"insertPageModalConfirmButton\"\n            label=\"insertPageModal.button\"\n            onClick={apply}\n            disabled={insertPageWidth <= 0 || insertPageHeight <= 0 || isUploadPagePanelActive || insertNewPageIndexes.length === 0} />\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <Swipeable onSwipedUp={closeModal} onSwipedDown={closeModal} preventDefaultTouchmoveEvent>\n      <div className={modalClass} data-element={DataElements.INSERT_PAGE_MODAL} onMouseDown={selectedDoc ? showCloseModalWarning : closeModal}>\n        <FocusTrap locked={true}>\n          {selectedDoc ? renderFileSelectedPanel() : renderSelectionTabs()}\n        </FocusTrap>\n      </div>\n    </Swipeable>\n  );\n};\n\nexport default InsertPageModal;\n","import React from 'react';\nimport InsertPageModal from './InsertPageModal';\nimport { useSelector } from 'react-redux';\nimport selectors from 'selectors';\nimport DataElements from 'constants/dataElement';\nimport core from 'core';\n\nconst InsertPageModalContainer = () => {\n  const [isDisabled, isOpen] = useSelector((state) => [\n    selectors.isElementDisabled(state, DataElements.INSERT_PAGE_MODAL),\n    selectors.isElementOpen(state, DataElements.INSERT_PAGE_MODAL),\n  ]);\n\n\n  if (!isDisabled && isOpen) {\n    const loadedDocumentPageCount = core.getTotalPages();\n    return (<InsertPageModal loadedDocumentPageCount={loadedDocumentPageCount} />);\n  }\n  return null;\n};\nexport default InsertPageModalContainer;","import InsertPageModal from './InsertPageModalContainer';\n\nexport default InsertPageModal;"],"sourceRoot":""}
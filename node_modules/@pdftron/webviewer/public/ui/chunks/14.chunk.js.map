{"version":3,"sources":["webpack:///./src/ui/src/components/SaveModal/SaveModal.scss?e39c","webpack:///./src/ui/src/components/SaveModal/SaveModal.js","webpack:///./src/ui/src/components/SaveModal/index.js"],"names":["module","exports","PAGE_RANGES","FILE_TYPES","OFFICE","label","extension","PDF","IMAGE","OFFICE_EDITOR","CORRUPTED_OFFICE_EXTENSIONS","SaveModal","store","useStore","dispatch","useDispatch","t","useTranslation","useSelector","state","selectors","isElementOpen","DataElements","SAVE_MODAL","getActiveDocumentViewerKey","isOpen","activeDocumentViewerKey","initalFileTypes","useState","fileTypes","setFileTypes","filename","setFilename","filetype","setFiletype","pageRange","setPageRange","specifiedPages","setSpecifiedPages","includeAnnotations","setIncludeAnnotations","includeComments","setIncludeComments","pageCount","setPageCount","errorText","setErrorText","documentType","setDocumentType","useEffect","updateFile","document","core","getDocument","getFilename","newFilename","substring","lastIndexOf","type","getType","workerTypes","array","split","length","includes","getDocumentCompletePromise","getTotalPages","addEventListener","undefined","removeEventListener","closeModal","actions","closeElement","clearError","hasTyped","setHasTyped","saveDisabled","optionsDisabled","onSwipedUp","onSwipedDown","preventDefaultTouchmoveEvent","FocusTrap","locked","className","classNames","open","closed","data-element","Button","onClick","img","title","placeholder","value","onChange","e","target","Dropdown","items","map","i","onClickItem","find","currentSelectionKey","classList","contains","onSubmit","preventDefault","Choice","checked","radio","name","error","PageNumberInput","selectedPageNumbers","onBlurHandler","onSelectedPageNumbersChange","placeHolder","pageNumberPlaceholder","onError","disabled","pages","getCurrentPage","range","downloadPdf","downloadType"],"mappings":"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","file":"chunks/14.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LEFT_HEADER_WIDTH\":\"41px\",\"RIGHT_HEADER_WIDTH\":\"41px\"};","import React, {\n  useEffect,\n  useState,\n} from 'react';\nimport { useSelector, useDispatch, useStore } from 'react-redux';\nimport selectors from 'selectors';\nimport actions from 'actions';\nimport { useTranslation } from 'react-i18next';\nimport DataElements from 'constants/dataElement';\nimport Button from 'components/Button';\nimport { FocusTrap, Choice } from '@pdftron/webviewer-react-toolkit';\nimport { Swipeable } from 'react-swipeable';\nimport core from 'core';\nimport classNames from 'classnames';\nimport Dropdown from 'components/Dropdown';\nimport PageNumberInput from 'components/PageReplacementModal/PageNumberInput';\nimport pageNumberPlaceholder from 'constants/pageNumberPlaceholder';\nimport downloadPdf from 'helpers/downloadPdf';\nimport { workerTypes } from 'constants/types';\nimport { range } from 'lodash';\n\nimport './SaveModal.scss';\n\nconst PAGE_RANGES = {\n  ALL: 'all',\n  CURRENT_PAGE: 'currentPage',\n  CURRENT_VIEW: 'currentView',\n  SPECIFY: 'specify'\n};\nconst FILE_TYPES = {\n  OFFICE: { label: 'OFFICE (*.pptx,*.docx,*.xlsx)', extension: 'office' },\n  PDF: { label: 'PDF (*.pdf)', extension: 'pdf', },\n  IMAGE: { label: 'PNG (*.png)', extension: 'png', },\n  OFFICE_EDITOR: { label: 'Word Document (*.docx)', extension: 'office', },\n};\n// These legacy office extensions return corrupted file data from the workers if downloaded as OFFICE\nconst CORRUPTED_OFFICE_EXTENSIONS = ['.ppt', '.xls'];\n\nconst SaveModal = () => {\n  const store = useStore();\n  const dispatch = useDispatch();\n  const { t } = useTranslation();\n  const [isOpen, activeDocumentViewerKey] = useSelector((state) => [\n    selectors.isElementOpen(state, DataElements.SAVE_MODAL),\n    selectors.getActiveDocumentViewerKey(state),\n  ]);\n\n  const initalFileTypes = [FILE_TYPES.PDF, FILE_TYPES.IMAGE];\n  const [fileTypes, setFileTypes] = useState(initalFileTypes);\n  const [filename, setFilename] = useState('');\n  const [filetype, setFiletype] = useState(fileTypes[0]);\n  const [pageRange, setPageRange] = useState(PAGE_RANGES.ALL);\n  const [specifiedPages, setSpecifiedPages] = useState();\n  const [includeAnnotations, setIncludeAnnotations] = useState(true);\n  const [includeComments, setIncludeComments] = useState(false);\n  const [pageCount, setPageCount] = useState(1);\n  const [errorText, setErrorText] = useState('');\n  const [documentType, setDocumentType] = useState('');\n\n  useEffect(() => {\n    const updateFile = async () => {\n      const document = core.getDocument(activeDocumentViewerKey);\n      if (document) {\n        setFiletype(FILE_TYPES.PDF);\n        setFileTypes(initalFileTypes);\n        const filename = document.getFilename();\n        const newFilename = filename.substring(0, filename.lastIndexOf('.')) || filename;\n        setFilename(newFilename);\n        const type = document.getType();\n        setDocumentType(type);\n        if (type === workerTypes.OFFICE) {\n          const array = filename.split('.');\n          const extension = `.${array[array.length - 1]}`;\n          if (!CORRUPTED_OFFICE_EXTENSIONS.includes(extension)) {\n            setFileTypes([...initalFileTypes, FILE_TYPES.OFFICE]);\n          }\n          await document.getDocumentCompletePromise();\n        } else if (type === workerTypes.OFFICE_EDITOR) {\n          setFileTypes([FILE_TYPES.OFFICE_EDITOR]);\n          setFiletype(FILE_TYPES.OFFICE_EDITOR);\n        }\n        setPageCount(core.getTotalPages(activeDocumentViewerKey));\n      }\n    };\n    updateFile();\n    core.addEventListener('documentLoaded', updateFile, undefined, activeDocumentViewerKey);\n    return () => core.removeEventListener('documentLoaded', updateFile, activeDocumentViewerKey);\n  }, [activeDocumentViewerKey]);\n\n  useEffect(() => {\n    if (documentType === workerTypes.OFFICE_EDITOR) {\n      setFilename(core.getDocument().getFilename());\n    }\n  }, [isOpen, documentType]);\n\n  const closeModal = () => dispatch(actions.closeElement(DataElements.SAVE_MODAL));\n  const preventDefault = (e) => e.preventDefault();\n  const onFilenameChange = (e) => setFilename(e?.target?.value);\n  const onFiletypeChange = (e) => {\n    setFiletype(fileTypes.find((i) => i.label === e));\n    if (e === FILE_TYPES.OFFICE.label) {\n      setPageRange(PAGE_RANGES.ALL);\n    }\n  };\n  const onPageRangeChange = (e) => {\n    if (e.target.classList.contains('page-number-input')) {\n      return;\n    }\n    setPageRange(e.target.value);\n    if (errorText) {\n      setHasTyped(false);\n      clearError();\n    }\n  };\n  const onIncludeAnnotationsChanged = () => setIncludeAnnotations(!includeAnnotations);\n  const onIncludeCommentsChanged = () => setIncludeComments(!includeComments);\n  const clearError = () => setErrorText('');\n  const onError = () => setErrorText(t('saveModal.pageError') + pageCount);\n  const onSpecifiedPagesChanged = () => {\n    if (!hasTyped) {\n      setHasTyped(true);\n    }\n    clearError();\n  };\n  const onSave = () => {\n    let pages;\n    if (pageRange === PAGE_RANGES.SPECIFY) {\n      pages = specifiedPages?.length ? specifiedPages : [core.getCurrentPage(activeDocumentViewerKey)];\n    } else if (pageRange === PAGE_RANGES.CURRENT_PAGE) {\n      pages = [core.getCurrentPage(activeDocumentViewerKey)];\n    } else if (pageRange === PAGE_RANGES.CURRENT_VIEW) {\n      pages = [core.getCurrentPage(activeDocumentViewerKey)];\n    } else {\n      pages = range(1, core.getTotalPages(activeDocumentViewerKey) + 1, 1);\n    }\n\n    downloadPdf(dispatch, {\n      includeAnnotations,\n      includeComments,\n      filename: filename || 'untitled',\n      downloadType: filetype.extension,\n      pages,\n      store,\n    }, activeDocumentViewerKey);\n    if (documentType === workerTypes.OFFICE_EDITOR) {\n      closeModal();\n    }\n  };\n\n  const [hasTyped, setHasTyped] = useState(false);\n  const saveDisabled = (errorText || !hasTyped) && pageRange === PAGE_RANGES.SPECIFY;\n  const optionsDisabled = filetype.extension === 'office' || documentType === workerTypes.OFFICE_EDITOR;\n\n  return (\n    <Swipeable onSwipedUp={closeModal} onSwipedDown={closeModal} preventDefaultTouchmoveEvent>\n      <FocusTrap locked={isOpen}>\n        <div className={classNames('SaveModal', { open: isOpen, closed: !isOpen })} data-element={DataElements.SAVE_MODAL}>\n          <div className='container'>\n            <div className='header'>\n              <div className='header-text' >{t('saveModal.saveAs')}</div>\n              <Button className='close-button' onClick={closeModal} img='ic_close_black_24px' title='action.close' />\n            </div>\n            <div className='modal-body'>\n              <div className='title'>{t('saveModal.general')}</div>\n              <div className='input-container'>\n                <div className='label'>{t('saveModal.fileName')}</div>\n                <input type='text' placeholder={t('saveModal.fileName')} value={filename} onChange={onFilenameChange} />\n              </div>\n              <div className='input-container'>\n                <div className='label'>{t('saveModal.fileType')}</div>\n                <Dropdown\n                  items={fileTypes.map((i) => i.label)}\n                  onClickItem={onFiletypeChange}\n                  currentSelectionKey={filetype.label}\n                />\n              </div>\n              {!optionsDisabled && (<>\n                <div className='title'>{t('saveModal.pageRange')}</div>\n                <form className='radio-container' onChange={onPageRangeChange} onSubmit={preventDefault}>\n                  <Choice\n                    checked={pageRange === PAGE_RANGES.ALL}\n                    radio\n                    name='page-range-option'\n                    label={t('saveModal.all')}\n                    value={PAGE_RANGES.ALL}\n                  />\n                  <Choice\n                    checked={pageRange === PAGE_RANGES.CURRENT_PAGE}\n                    radio\n                    name='page-range-option'\n                    label={t('saveModal.currentPage')}\n                    value={PAGE_RANGES.CURRENT_PAGE}\n                  />\n                  {/* Temporarily commented out */}\n                  {/* <Choice */}\n                  {/*  checked={pageRange === PAGE_RANGES.CURRENT_VIEW} */}\n                  {/*  radio */}\n                  {/*  name='page-range-option' */}\n                  {/*  label={t('saveModal.currentView')} */}\n                  {/*  value={PAGE_RANGES.CURRENT_VIEW} */}\n                  {/* /> */}\n                  <Choice\n                    checked={pageRange === PAGE_RANGES.SPECIFY}\n                    radio\n                    name='page-range-option'\n                    label={t('saveModal.specifyPage')}\n                    value={PAGE_RANGES.SPECIFY}\n                  />\n\n                  {pageRange === PAGE_RANGES.SPECIFY && (\n                    <div className={classNames('page-number-input-container', { error: !!errorText })}>\n                      <PageNumberInput\n                        selectedPageNumbers={specifiedPages}\n                        pageCount={pageCount}\n                        onBlurHandler={setSpecifiedPages}\n                        onSelectedPageNumbersChange={onSpecifiedPagesChanged}\n                        placeHolder={pageNumberPlaceholder}\n                        onError={onError}\n                      />\n                      {errorText && <div className=\"error-text\">{errorText}</div>}\n                    </div>\n                  )}\n                </form>\n                <div className='title'>{t('saveModal.properties')}</div>\n                <div className='checkbox-container'>\n                  <Choice\n                    checked={includeAnnotations}\n                    name='include-annotation-option'\n                    label={t('saveModal.includeAnnotation')}\n                    onChange={onIncludeAnnotationsChanged}\n                  />\n                  <Choice\n                    checked={includeComments}\n                    name='include-comment-option'\n                    label={t('saveModal.includeComments')}\n                    onChange={onIncludeCommentsChanged}\n                  />\n                </div>\n              </>)}\n            </div>\n            <div className='footer'>\n              <button disabled={saveDisabled} onClick={onSave}>{t('saveModal.save')}</button>\n            </div>\n          </div>\n        </div>\n      </FocusTrap>\n    </Swipeable>\n  );\n};\n\nexport default SaveModal;\n","import SaveModal from './SaveModal';\n\nexport default SaveModal;\n"],"sourceRoot":""}
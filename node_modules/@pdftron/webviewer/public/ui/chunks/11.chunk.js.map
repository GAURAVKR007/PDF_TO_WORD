{"version":3,"sources":["webpack:///./src/ui/src/components/ErrorModal/ErrorModal.scss?c192","webpack:///./src/ui/src/components/ErrorModal/ErrorModal.js","webpack:///./src/ui/src/components/ErrorModal/index.js"],"names":["module","exports","ErrorModal","useSelector","state","selectors","getErrorMessage","isElementDisabled","DataElements","ERROR_MODAL","isElementOpen","getIsMultiTab","shallowEqual","message","isDisabled","isOpen","isMultiTab","dispatch","useDispatch","t","useTranslation","isTrialError","includes","useEffect","actions","closeElements","SIGNATURE_MODAL","PRINT_MODAL","PASSWORD_MODAL","FILTER_MODAL","window","addEventListener","e","escapePressListener","closeErrorModal","removeEventListener","shouldTranslate","startsWith","tabsPadding","getRootNode","getElementsByClassName","getBoundingClientRect","bottom","closeElement","open","buttonLabel","className","classNames","Modal","closed","style","height","undefined","data-element","ModalWrapper","title","closeButtonDataElement","onCloseClick","Button","dataElement","label","onClick"],"mappings":"+EACAA,EAAOC,QAAU,CAAC,kBAAoB,OAAO,mBAAqB,S,oxCCalE,IAuFeC,EAvFI,WACjB,IAQC,IARiDC,aAChD,SAACC,GAAK,MAAK,CACTC,IAAUC,gBAAgBF,GAC1BC,IAAUE,kBAAkBH,EAAOI,IAAaC,aAChDJ,IAAUK,cAAcN,EAAOI,IAAaC,aAC5CJ,IAAUM,cAAcP,MAE1BQ,KACD,GARMC,EAAO,KAAEC,EAAU,KAAEC,EAAM,KAAEC,EAAU,KASxCC,EAAWC,cACVC,EAAqB,EAAhBC,cAAgB,GAApB,GAEFC,EAAe,SAACR,GACpB,OAAOA,aAAO,EAAPA,EAASS,SAAS,mBAG3BC,qBAAU,WACR,GAAIR,EAaF,OAZAE,EACEO,IAAQC,cAAc,CACpBjB,IAAakB,gBACblB,IAAamB,YACb,eACA,gBACAnB,IAAaoB,eACbpB,IAAaqB,gBAIjBC,OAAOC,iBAAiB,WAAW,SAACC,GAAC,OAAKC,YAAoBD,EAAGE,MAC1D,kBAAMJ,OAAOK,oBAAoB,UAAWF,QAEpD,CAAChB,EAAUF,IAEd,IAGgB,EAHVqB,EAAkBvB,EAAQwB,WAAW,YAEvCC,EAAc,EACdtB,IAEFsB,GAAoE,QAAzD,EAAIC,cAAcC,uBAAuB,cAAc,UAAE,aAArD,EAAuDC,wBAAwBC,QAGhG,IAAMR,EAAkB,WACtBjB,EAASO,IAAQmB,aAAanC,IAAaC,cACvCY,EAAaR,IACfiB,OAAOc,KAAK,yBAA0B,WAItCC,EAAc1B,EAAE,aAMpB,OAJIE,EAAaR,KACfgC,EAAc,iBAGT/B,EAAa,KAClB,yBACEgC,UAAWC,IAAW,CACpBC,OAAO,EACP9C,YAAY,EACZ0C,KAAM7B,EACNkC,QAASlC,IAEXmC,MAAOlC,EAAa,CAAEmC,OAAQ,eAAF,OAAiBb,EAAW,aAAUc,EAClEC,eAAa,cAEb,kBAACC,EAAA,EAAY,CAACvC,OAAQA,EAAQwC,MAAO,gBACnCC,uBAAwB,wBACxBC,aAAcvB,GAEd,yBAAKY,UAAU,qCACb,2BAAIV,EAAkBjB,EAAEN,GAAWA,IAErC,yBAAKiC,UAAU,uBACb,kBAACY,EAAA,EAAM,CACLZ,UAAU,uBACVa,YAAY,wBACZC,MAAOf,EACPgB,QAAS3B,QC3FNhC","file":"chunks/11.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LEFT_HEADER_WIDTH\":\"41px\",\"RIGHT_HEADER_WIDTH\":\"41px\"};","import React, { useEffect } from 'react';\nimport classNames from 'classnames';\nimport { shallowEqual, useDispatch, useSelector } from 'react-redux';\nimport { useTranslation } from 'react-i18next';\nimport actions from 'actions';\nimport selectors from 'selectors';\nimport Button from 'components/Button';\nimport { escapePressListener } from 'helpers/accessibility';\nimport ModalWrapper from '../ModalWrapper';\nimport getRootNode from 'helpers/getRootNode';\nimport DataElements from 'constants/dataElement';\n\nimport './ErrorModal.scss';\n\nconst ErrorModal = () => {\n  const [message, isDisabled, isOpen, isMultiTab] = useSelector(\n    (state) => [\n      selectors.getErrorMessage(state),\n      selectors.isElementDisabled(state, DataElements.ERROR_MODAL),\n      selectors.isElementOpen(state, DataElements.ERROR_MODAL),\n      selectors.getIsMultiTab(state),\n    ],\n    shallowEqual\n  );\n  const dispatch = useDispatch();\n  const [t] = useTranslation();\n\n  const isTrialError = (message) => {\n    return message?.includes('dev.apryse.com');\n  };\n\n  useEffect(() => {\n    if (isOpen) {\n      dispatch(\n        actions.closeElements([\n          DataElements.SIGNATURE_MODAL,\n          DataElements.PRINT_MODAL,\n          'loadingModal',\n          'progressModal',\n          DataElements.PASSWORD_MODAL,\n          DataElements.FILTER_MODAL\n        ])\n      );\n\n      window.addEventListener('keydown', (e) => escapePressListener(e, closeErrorModal));\n      return () => window.removeEventListener('keydown', escapePressListener);\n    }\n  }, [dispatch, isOpen]);\n\n  const shouldTranslate = message.startsWith('message.');\n\n  let tabsPadding = 0;\n  if (isMultiTab) {\n    // Add tabsheader padding\n    tabsPadding += getRootNode().getElementsByClassName('TabsHeader')[0]?.getBoundingClientRect().bottom;\n  }\n\n  const closeErrorModal = () => {\n    dispatch(actions.closeElement(DataElements.ERROR_MODAL));\n    if (isTrialError(message)) {\n      window.open('https://dev.apryse.com', '_blank');\n    }\n  };\n\n  let buttonLabel = t('action.ok');\n\n  if (isTrialError(message)) {\n    buttonLabel = 'Get trial key';\n  }\n\n  return isDisabled ? null : (\n    <div\n      className={classNames({\n        Modal: true,\n        ErrorModal: true,\n        open: isOpen,\n        closed: !isOpen,\n      })}\n      style={isMultiTab ? { height: `calc(100% - ${tabsPadding}px)` } : undefined}\n      data-element=\"errorModal\"\n    >\n      <ModalWrapper isOpen={isOpen} title={'message.error'}\n        closeButtonDataElement={'errorModalCloseButton'}\n        onCloseClick={closeErrorModal}\n      >\n        <div className=\"modal-content error-modal-content\">\n          <p>{shouldTranslate ? t(message) : message}</p>\n        </div>\n        <div className=\"modal-footer footer\">\n          <Button\n            className=\"confirm modal-button\"\n            dataElement=\"closeErrorModalButton\"\n            label={buttonLabel}\n            onClick={closeErrorModal}\n          />\n        </div>\n      </ModalWrapper>\n    </div>\n  );\n};\n\nexport default ErrorModal;\n","import ErrorModal from './ErrorModal';\n\nexport default ErrorModal;\n"],"sourceRoot":""}
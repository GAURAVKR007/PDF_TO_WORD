{"version":3,"sources":["webpack:///./src/ui/src/components/PageRedactionModal/PageRedactionModal.scss?c576","webpack:///./src/ui/src/components/PageRedactionModal/PageRedactionModal.js","webpack:///./src/ui/src/components/PageRedactionModal/PageRedactionModalContainer.js","webpack:///./src/ui/src/components/PageRedactionModal/index.js"],"names":["module","exports","propTypes","closeModal","PropTypes","func","currentPage","number","pageLabels","array","selectedPages","markPages","redactPages","evenDisabled","bool","renderCanvases","isOpen","SelectionTypes","PageRedactionModal","t","useTranslation","useState","selectionType","setSelectionType","pages","setPages","useEffect","getSelectedPages","pageNumbers","i","length","push","canvasContainer","useRef","onSwipe","e","eventTarget","event","target","current","clientHeight","scrollHeight","clientWidth","scrollWidth","contains","stopPropagation","onSwipedUp","onSwipedDown","preventDefaultTouchmoveEvent","focus","FocusTrap","locked","className","classNames","Modal","open","closed","data-element","DataElements","PAGE_REDACT_MODAL","Button","onClick","img","ref","onChange","classList","value","onSubmit","preventDefault","Choice","checked","radio","name","label","PageNumberInput","selectedPageNumbers","pageCount","onBlurHandler","placeHolder","pageNumberPlaceholder","disabled","dataElement","PageRedactionModalContainer","dispatch","useDispatch","useSelector","state","selectors","isElementOpen","getCurrentPage","getSelectedThumbnailPageIndexes","getPageLabels","getActiveToolName","getActiveToolStyles","selectedIndexes","activeToolName","activeToolStyles","renderCanvasesCount","map","index","actions","closeElements","PRINT_MODAL","ERROR_MODAL","closeElement","getRedactionStyles","includes","setEvenDisabled","docLoaded","document","core","getDocument","documentCompletePromise","getDocumentCompletePromise","then","getPageCount","addEventListener","removeEventListener","callCount","doc","firstChild","removeChild","splice","pageNumber","pageInfo","getPageInfo","zoom","rect","getBoundingClientRect","borderWidth","parseInt","window","getComputedStyle","height","width","loadCanvas","pageRotation","drawComplete","canvas","appendChild","allowUseOfOptimizedThumbnail","createPageRedactions"],"mappings":"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","file":"chunks/13.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LEFT_HEADER_WIDTH\":\"41px\",\"RIGHT_HEADER_WIDTH\":\"41px\"};","import React, { useEffect, useState, useRef } from 'react';\nimport DataElements from 'constants/dataElement';\nimport pageNumberPlaceholder from 'constants/pageNumberPlaceholder';\nimport classNames from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport Button from 'components/Button';\nimport Choice from 'components/Choice';\nimport { Swipeable } from 'react-swipeable';\nimport PropTypes from 'prop-types';\nimport { FocusTrap } from '@pdftron/webviewer-react-toolkit';\nimport PageNumberInput from 'components/PageReplacementModal/PageNumberInput';\n\nimport './PageRedactionModal.scss';\n\nconst propTypes = {\n  closeModal: PropTypes.func,\n  currentPage: PropTypes.number,\n  pageLabels: PropTypes.array,\n  selectedPages: PropTypes.array,\n  markPages: PropTypes.func,\n  redactPages: PropTypes.func,\n  evenDisabled: PropTypes.bool,\n  renderCanvases: PropTypes.func,\n  isOpen: PropTypes.bool,\n};\n\nconst SelectionTypes = {\n  CURRENT: 'current',\n  SPECIFY: 'specify',\n  ODD: 'odd',\n  EVEN: 'even',\n};\n\nconst PageRedactionModal = ({\n  closeModal,\n  pageLabels,\n  selectedPages,\n  currentPage,\n  markPages,\n  redactPages,\n  evenDisabled,\n  renderCanvases,\n  isOpen,\n}) => {\n  const { t } = useTranslation();\n\n  const [selectionType, setSelectionType] = useState(SelectionTypes.CURRENT);\n  const [pages, setPages] = useState();\n  useEffect(() => {\n    setPages(selectedPages);\n  }, [selectedPages]);\n\n  const getSelectedPages = () => {\n    const pageNumbers = [];\n    if (selectionType === SelectionTypes.CURRENT) {\n      return [currentPage];\n    }\n    if (selectionType === SelectionTypes.SPECIFY) {\n      return pages;\n    }\n    if (selectionType === SelectionTypes.ODD) {\n      for (let i = 1; pageLabels.length >= i; i += 2) {\n        pageNumbers.push(i);\n      }\n    } else if (selectionType === SelectionTypes.EVEN) {\n      for (let i = 2; pageLabels.length >= i; i += 2) {\n        pageNumbers.push(i);\n      }\n    }\n    return pageNumbers;\n  };\n\n  const onMark = () => markPages(getSelectedPages());\n  const onRedact = () => redactPages(getSelectedPages());\n\n  const canvasContainer = useRef();\n  useEffect(() => {\n    if (isOpen) {\n      renderCanvases(canvasContainer, getSelectedPages());\n    }\n  }, [selectionType, isOpen, pages, renderCanvases, getSelectedPages]);\n\n  const onSwipe = (e) => {\n    const eventTarget = e.event.target;\n    const containerHasScroll =\n      canvasContainer.current.clientHeight < canvasContainer.current.scrollHeight ||\n      canvasContainer.current.clientWidth < canvasContainer.current.scrollWidth;\n    if (\n      containerHasScroll &&\n      (eventTarget === canvasContainer.current || canvasContainer.current.contains(eventTarget))\n    ) {\n      e.event.stopPropagation();\n    } else {\n      closeModal();\n    }\n  };\n\n  const onSelectionChange = (e) => {\n    if (!e.target.classList.contains('page-number-input')) {\n      setSelectionType(e.target.value);\n    }\n  };\n  const onPagesChanged = (pages) => setPages(pages);\n\n  return (\n    <Swipeable onSwipedUp={onSwipe} onSwipedDown={onSwipe} preventDefaultTouchmoveEvent focus>\n      <FocusTrap locked={isOpen}>\n        <div\n          className={classNames({\n            Modal: true,\n            PageRedactionModal: true,\n            open: isOpen,\n            closed: !isOpen,\n          })}\n          data-element={DataElements.PAGE_REDACT_MODAL}\n        >\n          <div className=\"container\">\n            <div className=\"swipe-indicator\" />\n            <div className=\"header\">\n              <div className=\"header-text\">{t('option.pageRedactModal.header')}</div>\n              <Button onClick={closeModal} img=\"icon-close\" />\n            </div>\n            <div className=\"body\">\n              <div className=\"canvas-container\" ref={canvasContainer} />\n              <form className=\"selection-options\" onChange={onSelectionChange} onSubmit={(e) => e.preventDefault()}>\n                <strong>{t('option.pageRedactModal.pageSelection')}</strong>\n                <Choice\n                  checked={selectionType === SelectionTypes.CURRENT}\n                  radio\n                  name=\"page-redaction-option\"\n                  label={t('option.pageRedactModal.current')}\n                  value={SelectionTypes.CURRENT}\n                />\n                <Choice\n                  checked={selectionType === SelectionTypes.SPECIFY}\n                  radio\n                  name=\"page-redaction-option\"\n                  label={t('option.pageRedactModal.specify')}\n                  value={SelectionTypes.SPECIFY}\n                />\n                {selectionType === 'specify' && (\n                  <PageNumberInput\n                    selectedPageNumbers={pages}\n                    pageCount={pageLabels.length}\n                    onBlurHandler={onPagesChanged}\n                    placeHolder={pageNumberPlaceholder}\n                  />\n                )}\n                <Choice\n                  checked={selectionType === SelectionTypes.ODD}\n                  radio\n                  name=\"page-redaction-option\"\n                  label={t('option.pageRedactModal.odd')}\n                  value={SelectionTypes.ODD}\n                />\n                <Choice\n                  checked={selectionType === SelectionTypes.EVEN}\n                  radio\n                  name=\"page-redaction-option\"\n                  label={t('option.pageRedactModal.even')}\n                  value={SelectionTypes.EVEN}\n                  disabled={evenDisabled}\n                />\n              </form>\n            </div>\n            <div className=\"footer\">\n              <Button\n                className=\"cancel modal-button\"\n                dataElement=\"modalRedactButton\"\n                label=\"annotation.redact\"\n                onClick={onRedact}\n              />\n              <Button\n                className=\"confirm modal-button\"\n                dataElement=\"modalMarkRedactButton\"\n                label=\"option.pageRedactModal.addMark\"\n                onClick={onMark}\n              />\n            </div>\n          </div>\n        </div>\n      </FocusTrap>\n    </Swipeable>\n  );\n};\n\nPageRedactionModal.propTypes = propTypes;\n\nexport default PageRedactionModal;\n","import React, { useEffect, useState, useRef } from 'react';\nimport DataElements from 'constants/dataElement';\nimport { useDispatch, useSelector } from 'react-redux';\nimport selectors from 'selectors';\nimport actions from 'actions';\nimport core from 'core';\nimport { createPageRedactions, redactPages } from 'helpers/pageManipulationFunctions';\nimport PageRedactionModal from 'components/PageRedactionModal/PageRedactionModal';\n\nimport './PageRedactionModal.scss';\n\nconst MAX_CANVAS_COUNT = 10;\n\nconst PageRedactionModalContainer = () => {\n  const dispatch = useDispatch();\n  const [isOpen, currentPage, selectedIndexes, pageLabels, activeToolName, activeToolStyles] = useSelector((state) => [\n    selectors.isElementOpen(state, DataElements.PAGE_REDACT_MODAL),\n    selectors.getCurrentPage(state),\n    selectors.getSelectedThumbnailPageIndexes(state),\n    selectors.getPageLabels(state),\n    selectors.getActiveToolName(state),\n    selectors.getActiveToolStyles(state)\n  ]);\n  const renderCanvasesCount = useRef(0);\n\n  const selectedPages = selectedIndexes.map((index) => index + 1);\n\n  useEffect(() => {\n    if (isOpen) {\n      dispatch(actions.closeElements([DataElements.PRINT_MODAL, 'loadingModal', 'progressModal', DataElements.ERROR_MODAL]));\n    }\n  }, [isOpen, dispatch]);\n\n  const closeModal = () => dispatch(actions.closeElement(DataElements.PAGE_REDACT_MODAL));\n\n  const getRedactionStyles = () => (activeToolName?.includes('AnnotationCreateRedaction') ? activeToolStyles : {});\n\n  const onRedact = (pageNumbers) => {\n    redactPages(pageNumbers, getRedactionStyles());\n    closeModal();\n  };\n\n  const markPages = (pageNumbers) => {\n    createPageRedactions(pageNumbers, getRedactionStyles());\n    closeModal();\n  };\n\n  const renderCanvases = (canvasContainer, pageNumbers) => {\n    renderCanvasesCount.current++;\n    const callCount = renderCanvasesCount.current;\n\n    const doc = core.getDocument();\n    while (canvasContainer.current.firstChild) {\n      canvasContainer.current.removeChild(canvasContainer.current.firstChild);\n    }\n    if (!pageNumbers) {\n      return;\n    }\n    if (pageNumbers?.length > MAX_CANVAS_COUNT) {\n      pageNumbers = pageNumbers.splice(0, MAX_CANVAS_COUNT);\n    }\n    for (const pageNumber of pageNumbers) {\n      const pageInfo = doc?.getPageInfo(pageNumber);\n      if (isOpen && doc && canvasContainer.current && pageInfo) {\n        let zoom = 1;\n        const rect = canvasContainer.current.getBoundingClientRect();\n        const borderWidth = parseInt(window.getComputedStyle(canvasContainer.current).borderWidth) + 0.1;\n        rect.height -= borderWidth;\n        rect.width -= borderWidth;\n        if (pageInfo.width > pageInfo.height) {\n          zoom = rect.width / pageInfo.width;\n        } else {\n          zoom = rect.height / pageInfo.height;\n        }\n        zoom > 0 && doc.loadCanvas({\n          pageNumber,\n          zoom,\n          pageRotation: 0,\n          drawComplete: (canvas) => {\n            callCount === renderCanvasesCount.current && canvasContainer.current.appendChild(canvas);\n          },\n          allowUseOfOptimizedThumbnail: true\n        });\n      }\n    }\n  };\n\n  const [evenDisabled, setEvenDisabled] = useState(false);\n  useEffect(() => {\n    const docLoaded = () => {\n      const document = core.getDocument();\n      const documentCompletePromise = document.getDocumentCompletePromise();\n\n      // Office documents don't have all pages available onload, so we need to\n      // wait for the documentCompletePromise to resolve before we can check\n      documentCompletePromise?.then(() => {\n        const pageCount = document.getPageCount();\n        if (pageCount < 2) {\n          setEvenDisabled(true);\n        } else {\n          setEvenDisabled(false);\n        }\n      });\n    };\n    core.addEventListener('documentLoaded', docLoaded);\n    return () => core.removeEventListener('documentLoaded', docLoaded);\n  }, []);\n\n  return (\n    <PageRedactionModal\n      evenDisabled={evenDisabled}\n      closeModal={closeModal}\n      renderCanvases={renderCanvases}\n      redactPages={onRedact}\n      markPages={markPages}\n      currentPage={currentPage}\n      selectedPages={selectedPages}\n      pageLabels={pageLabels}\n      isOpen={isOpen}\n    />\n  );\n};\n\nexport default PageRedactionModalContainer;","import PageRedactionModalContainer from 'components/PageRedactionModal/PageRedactionModalContainer';\n\nexport default PageRedactionModalContainer;"],"sourceRoot":""}
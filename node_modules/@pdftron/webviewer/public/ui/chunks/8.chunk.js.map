{"version":3,"sources":["webpack:///./src/ui/src/components/PageReplacementModal/FileListPanel/FileListPanel.scss?178c","webpack:///./src/ui/src/components/PageReplacementModal/FileSelectedPanel/FileSelectedPanel.scss?0f38","webpack:///./src/ui/src/components/PageReplacementModal/FileListPanel/index.js","webpack:///./src/ui/src/components/PageReplacementModal/FileListPanel/FileListPanel.js","webpack:///./src/ui/src/components/PageReplacementModal/FileSelectedPanel/FileSelectedPanel.js","webpack:///./src/ui/src/components/PageReplacementModal/FileSelectedPanel/FileSelectedPanelContainer.js","webpack:///./src/ui/src/components/PageReplacementModal/FileSelectedPanel/index.js","webpack:///./src/ui/src/components/PageReplacementModal/PageReplacementModal.js","webpack:///./src/ui/src/components/PageReplacementModal/PageReplacementModalContainer.js","webpack:///./src/ui/src/components/PageReplacementModal/PageReplacementModalRedux.js","webpack:///./src/ui/src/components/PageReplacementModal/index.js"],"names":["module","exports","FileListPanel","defaultValue","onFileSelect","list","id","elements","map","item","i","isSelected","modalClass","classNames","selected","thumbnail","hasOwnProperty","src","url","toDataURL","img","className","getFileThumbnail","tabIndex","key","onClick","find","onRowClick","onKeyDown","event","onRowKeyDown","filename","FileSelectedPanel","React","forwardRef","ref","closeThisModal","clearLoadedFile","pageIndicesToReplace","sourceDocument","replacePagesHandler","documentInViewer","closeModalWarning","t","useTranslation","useState","index","currentDocSelectedPageNumbers","setCurrentDocSelectedPageNumbers","selectedThumbnails","setSelectedThumbnails","isLoading","setIsLoading","sourceDocumentName","setSourceDocumentName","currentDocumentName","setCurrentDocumentName","sourceDocumentPageCount","setSourceDocumentPageCount","pageNumberError","setPageNumberError","isTablet","useMedia","isMobile","useEffect","pageCount","getPageCount","selectedPages","getTruncatedName","documentName","length","slice","getFilename","getPageNumbersFromSelectedThumbnails","selectedPageNumbers","pageNumber","push","parseInt","loadedDocumentPageCount","onMouseDown","e","stopPropagation","Button","dataElement","title","aria-label","PageNumberInput","onBlurHandler","pageNumbers","onError","selectedPagesMap","reduce","PageThumbnailsGrid","document","onThumbnailSelected","undefined","onfileLoadedHandler","isFileSelected","disabled","pagesToReplaceIntoDocument","label","pageIndex","isReplaceButtonDisabled","displayName","FileSelectedPanelContainer","props","core","getDocument","replacePages","isValidUrlRegex","RegExp","options","loadAsPDF","l","window","sampleL","PageReplacementModal","closeModal","selectableFiles","isOpen","selectedThumbnailPageIndexes","selectedTab","source","setSource","selectedDoc","setSelectedDoc","setIsFileSelected","selectedTabInternal","setSelectedTabInternal","dispatch","useDispatch","el","getRootNode","querySelector","value","exitPageReplacementWarning","Modal","open","closed","srcString","handleSelection","onSelect","createDocument","fileProcessedHandler","file","instance","Core","Document","isSelectBtnDisabled","test","isFilePanelEnabled","clearDocument","onSwipedUp","onSwipedDown","preventDefaultTouchmoveEvent","data-element","FocusTrap","locked","Tabs","selection","FileInputPanel","FilePickerPanel","fileInputId","onFileProcessed","noFile","PageReplacementModalContainer","closePageReplacement","rest","useCallback","newProps","PageReplacementModalRedux","useSelector","state","selectors","getPageReplacementFileList","isElementOpen","DataElements","PAGE_REPLACEMENT_MODAL","getSelectedThumbnailPageIndexes","getSelectedTab","actions","closeElement"],"mappings":"8EACAA,EAAOC,QAAU,CAAC,kBAAoB,OAAO,mBAAqB,S,qBCAlED,EAAOC,QAAU,CAAC,kBAAoB,OAAO,mBAAqB,S,+UCCnDC,G,oBCEO,SAAH,GAAkD,IAA5CC,EAAY,EAAZA,aAAcC,EAAY,EAAZA,aAAY,IAAEC,YAAI,IAAG,KAAE,EACpDC,GAAOH,GAAgB,IAAvBG,GA4BFC,EAAWF,EAAKG,KAAI,SAACC,EAAMC,GAC/B,IAAMC,EAAaL,IAAOG,EAAKH,GACzBM,EAAaC,IAAW,CAC5BC,SAAUH,IAGNI,EAtBiB,SAACN,GACxB,GAAIA,EAAKO,eAAe,aAAc,CACpC,IAAIC,EAAM,KACJF,EAAYN,EAAKM,UACnBA,EAAUG,IACZD,EAAMF,EAAUG,IACPH,EAAUI,YACnBF,EAAMF,EAAUI,aAGlB,IAAMC,EAAM,yBAAKH,IAAKA,EAAKI,UAAU,eACrC,OAAQ,yBAAKA,UAAU,UAAUD,GAEnC,OAAO,KASWE,CAAiBb,GAEnC,OACE,wBAAIc,SAAS,IAAIC,IAAKd,EAAGe,QAAS,kBAnCnB,SAACnB,GAClBF,EAAaC,EAAKqB,MAAK,SAACjB,GAAI,OAAKA,EAAKH,KAAOA,MAkCHqB,CAAWlB,EAAKH,KAAKsB,UAAW,SAACC,GAAK,OA/B7D,SAACA,EAAOvB,GACT,UAAduB,EAAML,KACRpB,EAAaC,EAAKqB,MAAK,SAACjB,GAAI,OAAKA,EAAKH,KAAOA,MA6BsCwB,CAAaD,EAAOpB,EAAKH,KAAKe,UAAWT,GACzHG,EACD,yBAAKM,UAAU,cAAeZ,EAAKsB,cAKzC,OACE,yBAAKV,UAAU,iBACb,4BACGd,M,43EC1CT,IAKMyB,EAAoBC,IAAMC,YAAW,WAStCC,GAAQ,IAPTC,EAAc,EAAdA,eACAC,EAAe,EAAfA,gBACAC,EAAoB,EAApBA,qBACAC,EAAc,EAAdA,eACAC,EAAmB,EAAnBA,oBACAC,EAAgB,EAAhBA,iBACAC,EAAiB,EAAjBA,kBAEKC,EAAqB,EAAhBC,cAAgB,GAApB,GAE0H,IAAxDC,mBAASP,EAAqB9B,KAAI,SAACsC,GAAK,OAAKA,EAAQ,MAAG,GAA3HC,EAA6B,KAAEC,EAAgC,KACN,IAAZH,mBAAS,IAAG,GAAzDI,EAAkB,KAAEC,EAAqB,KACA,IAAdL,oBAAS,GAAK,GAAzCM,EAAS,KAAEC,EAAY,KACoC,IAAdP,mBAAS,MAAK,GAA3DQ,EAAkB,KAAEC,EAAqB,KACoB,IAAdT,mBAAS,MAAK,GAA7DU,EAAmB,KAAEC,EAAsB,KACuB,IAAXX,mBAAS,GAAE,GAAlEY,EAAuB,KAAEC,EAA0B,KACA,IAAZb,mBAAS,IAAG,GAAnDc,EAAe,KAAEC,EAAkB,KAEpCC,EAAWC,YAEf,CAAC,6CACD,EAAC,IAED,GAGIC,EAAWD,YAEf,CAAC,sBACD,EAAC,IAED,GAGFE,qBAAU,WACR,GAAIzB,EAAgB,CAGlB,IAFA,IAAM0B,EAAY1B,EAAe2B,eAC3BC,EAAgB,GACbzD,EAAI,EAAGA,GAAKuD,EAAWvD,IAC9ByD,EAAczD,IAAK,EAErBwC,EAAsBiB,MAEvB,CAAC5B,IAEJyB,qBAAU,WACR,SAASI,EAAiBC,GAYxB,OAVIA,EAAaC,OAvDmB,GAwD9BT,IAAaE,EACC,IAAH,OAAOM,EAAaE,MAAM,EAvDhB,GAuD4C,cAAMF,EAAaE,MAAMF,EAAaC,QAAO,KAEhG,IAAH,OAAOD,EAAaE,MAAM,EA1DvB,IA0D4C,cAAMF,EAAaE,MAAMF,EAAaC,OA1DlF,IA0D6G,KAG/G,IAAH,OAAOD,EAAY,KAMpC,GAAI9B,EAAgB,CAClB,IAAM0B,EAAY1B,EAAe2B,eACjCR,EAA2BO,GAC3BX,EAAsBc,EAAiB7B,EAAeiC,gBACtDhB,EAAuBY,EAAiB3B,EAAiB+B,mBAE1D,CAACjC,IAEJ,IAUMkC,EAAuC,WAC3C,IAAMC,EAAsB,GAE5B,IAAK,IAAMC,KAAc1B,EACnBA,EAAmB0B,IACrBD,EAAoBE,KAAKC,SAASF,IAGtC,OAAOD,GA4CHI,EAA0BrC,EAAiByB,eAEjD,OACE,yBAAK7C,UAAU,8BAA8B0D,YAAa,SAACC,GAAC,OAAKA,EAAEC,mBAAmB9C,IAAKA,GACzF,yBAAKd,UAAU,oBACf,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,eACb,kBAAC6D,EAAA,EAAM,CACL9D,IAAK,kBACLK,QAASY,EACT8C,YAAa,2BACbC,MAAOzC,EAAE,iBAEVA,EAAE,oCAEL,kBAACuC,EAAA,EAAM,CACL9D,IAAK,aACLK,QAtBa,WACrBiB,KAsBQyC,YAAa,4BACb9D,UAAW,cACXgE,aAAW,aAIjB,yBAAKhE,UAAU,6BACf,yBAAKA,UAAU,cACb,yBAAKA,UAAU,gCACb,yBAAKA,UAAU,sBAAsBsB,EAAE,sDACvC,yBAAKtB,UAAU,6CACb,kBAACiE,EAAA,EAAe,CACdZ,oBAAqB3B,EACrBkB,UAAWa,EACXS,cAhDqB,SAACC,GAChC5B,EAAmB,MACnBZ,EAAiCwC,IA+CvBC,QA5CkB,SAACd,GACzBA,GACFf,EAAmB,GAAD,OAAIjB,EAAE,2BAA0B,YAAImC,OA4C/CnB,GAAmB,yBAAKtC,UAAU,qBAAqBsC,IAE1D,yBAAKtC,UAAU,sBAAqB,0BAAMA,UAAU,yBAAyBkC,IAC7E,0BAAMlC,UAAU,yBAAyBsB,EAAE,2DAC3C,kBAAC2C,EAAA,EAAe,CACdZ,oBAAqBD,IACrBR,UAAWR,EACX8B,cA/DgC,SAACb,GACzC,IAAMgB,EAAmBhB,EAAoBiB,QAAO,SAACnF,EAAKmE,GAAU,cAAWnE,GAAG,QAAGmE,GAAa,MAAS,IAC3GzB,EAAsB,EAAD,GAAMwC,OA+DrB,yBAAKrE,UAAU,sBAAqB,0BAAMA,UAAU,yBAAyBgC,KAE/E,yBAAKhC,UAAWR,IAAW,uBAAwB,CAAEsC,eACnD,kBAACyC,EAAA,EAAkB,CACjBC,SAAUtD,EACVuD,oBA3FkB,SAACnB,QACYoB,IAAnC9C,EAAmB0B,GACrB1B,EAAmB0B,IAAc,EAEjC1B,EAAmB0B,IAAe1B,EAAmB0B,GAEvDzB,EAAsB,EAAD,GAAMD,KAsFnBA,mBAAoBA,EACpB+C,oBAAqB5C,MAI3B,yBAAK/B,UAAU,6BACf,yBAAKA,UAAWR,IAAW,SAAU,CAAEoF,gBAAiB9C,KACtD,4BAAQ9B,UAAWR,IAAW,sBAAuB,CAAEqF,SAAU/C,IAAc1B,QAlHvD,WAC5ByB,EAAsB,KAiH6FgD,SAAU/C,GACtHR,EAAE,uBAEL,kBAACuC,EAAA,EAAM,CACL7D,UAAU,wBACVI,QAAS,kBA5HT0E,EAA6B1B,IACnCjC,EAAoBD,EAAgBQ,EAA+BoD,QACnE/D,IAHmB,IACb+D,GA6HAC,MAAOzD,EAAE,kBACTuD,SAjGwB,WAC9B,GAAInD,EAA8BuB,OAAS,GAAKX,EAC9C,OAAO,EAET,IAAK,IAAM0C,KAAapD,EACtB,GAAIA,EAAmBoD,GACrB,OAAO,EAGX,OAAO,EAwFSC,UAOpBtE,EAAkBuE,YAAc,oBAEjBvE,Q,2OCxNf,IAAMwE,EAA6BvE,IAAMC,YAAW,SAACuE,EAAOtE,GAC1D,IAAMM,EAAmBiE,IAAKC,cAE9B,OACE,kBAAC,EAAiB,KACZF,EAAK,CACThE,iBAAkBA,EAClBD,oBAAqBoE,IACrBzE,IAAKA,QAKXqE,EAA2BD,YAAc,6BAE1BC,ICnBAxE,EDmBAwE,E,60BEpBf,8lGAAA9F,GAAA,wBAAAA,EAAA,sBAAAA,GAAA,iBAAAA,GAAA,ssDAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,4bAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,yhBAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,qGAAAA,EAAA,yBAAAA,GAAA,IAAAA,EAAA,uBAAAA,GAAA,+kBAAAA,GAAA,gEAAAA,GAAA,0JAAAA,EAAA,6FAAAA,GAAA,mIAAAA,IAAA,4SAAAA,IAAA,2OAAAA,EAAA,iBAAAA,EAAA,EAAAA,IAAA,EAAAA,GAAA,EAAAA,GAAA,SAiBA,IAAMmG,EAAkB,IAAIC,OAAO,iFAAkF,KAC/GC,EAAU,CAAEC,WAAW,EAAMC,EAAGC,OAAOC,SA2M9BC,EAzMc,SAAH,GAMpB,IALJC,EAAU,EAAVA,WACAC,EAAe,EAAfA,gBACAC,EAAM,EAANA,OACAC,EAA4B,EAA5BA,6BACAC,EAAW,EAAXA,YAEO9E,EAAqB,EAAhBC,cAAgB,GAApB,GACgC,IAAZC,mBAAS,IAAG,GAAjC6E,EAAM,KAAEC,EAAS,KAC4B,IAAd9E,mBAAS,MAAK,GAA7C+E,EAAW,KAAEC,EAAc,KACyB,IAAfhF,oBAAS,GAAM,GAApDoD,EAAc,KAAE6B,EAAiB,KAC4B,IAAdjF,mBAAS,MAAK,GAA7DkF,EAAmB,KAAEC,EAAsB,KAI5CC,EAAWC,cAEjBlE,qBAAU,WACJuD,GAAUQ,IAAwBN,GACpCO,EAAuBP,KAExB,CAACF,EAAQQ,EAAqBN,IAEjC,IAAMrF,EAAiB,WACrByF,EAAe,MACfC,GAAkB,GAClB,IAAMK,EAAKC,cAAcC,cAAc,IAAD,OAbpB,+BAcdF,IACFA,EAAGG,MAAQ,MAEbjB,IACAW,EAAuB,MACvBL,EAAU,KAGNjF,EAAoB,WAAH,OAAS6F,YAA2BnG,EAAgB6F,IAErErH,EAAaC,IAAW,CAC5B2H,OAAO,EACPpB,sBAAsB,EACtBqB,KAAMlB,EACNmB,QAASnB,IAGLoB,EAAYjB,EAAOK,GACnBa,EAAe,6BAAG,oFACE,GAAxBd,GAAkB,IAEda,GAAqC,8BAAxBZ,EAAmD,oBAC9DY,EAAUE,SAAU,CAAF,+BACHF,EAAUE,WAAU,OAArChD,EAAW,EAAH,KACRgC,EAAehC,GAAU,kCAElB8C,EAAW,CAAF,iCACDjC,IAAKoC,eAAeH,EAAW5B,GAAQ,QAAxDlB,EAAW,EAAH,KACRgC,EAAehC,GAAU,4CAE5B,kBAZoB,mCAgBfkD,EAAoB,6BAAG,WAAOC,GAAI,4EAGlCA,aAAgBC,SAASC,KAAKC,UAAQ,gBACxCtD,EAAWmD,EAAK,sCAECtC,IAAKoC,eAAeE,EAAMjC,GAAQ,OAAnDlB,EAAW,EAAH,YAEVgC,EAAehC,GACfiC,GAAkB,GAAM,2CACzB,gBAVyB,sCAYtBsB,OAAoCrD,IAAd4C,EAEE,wBAAxBZ,GAAkDlB,EAAgBwC,KAAKV,KACzES,GAAsB,GAGxB,IAkBQE,EAlBFC,EAAgB,WACpB1B,EAAe,MACfC,GAAkB,IAoGpB,OAAOP,EACL,kBAAC,IAAS,CACRiC,WAAYpH,EACZqH,aAAcrH,EACdsH,8BAA4B,GAE5B,yBACErI,UAAWT,EACX+I,eAAa,uBACb5E,YAAakB,EAAiBvD,EAAoBN,EAClD9B,GAAG,wBAEH,kBAACsJ,EAAA,EAAS,CAACC,OAAQtC,GAChBtB,EA5GL,kBAAC,EAAiB,CAChB7D,eAAgBA,EAChBC,gBAAiBkH,EACjBjH,qBAAsBkF,EACtBjF,eAAgBqF,EAChBlF,kBAAmBA,KAMjB4G,EAAqBhC,GAAmBA,EAAgBhD,OAAS,EAGrE,yBAAKjD,UAAU,iBAAiB0D,YAAa,SAACC,GAAC,OAAKA,EAAEC,oBACpD,yBAAK5D,UAAU,oBACf,kBAACyI,EAAA,EAAI,CAACzI,UAAU,wBAAwBf,GAAG,wBACzC,yBAAKe,UAAU,oBACb,yBAAKA,UAAU,UACZsB,EAAE,mCACH,kBAACuC,EAAA,EAAM,CACL9D,IAAK,aACLK,QAASW,EACT+C,YAAa,4BACbE,aAAW,YAGf,yBAAKhE,UAAU,YACZiI,GACC,oCACE,kBAAC,IAAG,CAACnE,YAAY,6BACf,4BAAQ9D,UAAU,sBACfsB,EAAE,2CAGP,yBAAKtB,UAAU,yBAGnB,kBAAC,IAAG,CAAC8D,YAAY,uBACf,4BAAQ9D,UAAU,sBACfsB,EAAE,cAGP,yBAAKtB,UAAU,wBACf,kBAAC,IAAG,CAAC8D,YAAY,yBACf,4BAAQ9D,UAAU,sBACfsB,EAAE,6CAKX,yBAAKtB,UAAU,6BACf,kBAAC,IAAQ,CAAC8D,YAAY,uBACpB,yBAAK9D,UAAU,cACb,kBAAC,EAAa,CACZjB,aAAc,SAAC2J,GACbpC,EAAU,KAAGI,EAAsBgC,KAErC1J,KAAMiH,EACNnH,aAAcwI,MAIpB,kBAAC,IAAQ,CAACxD,YAAY,iBACpB,yBAAK9D,UAAU,cACb,kBAAC2I,EAAA,EAAc,CACb5J,aAAc,SAACc,GACbyG,EAAU,KAAGI,EAAsB7G,KAErCf,aAAcuH,EAA4B,wBAIhD,kBAAC,IAAQ,CAACvC,YAAY,mBACpB,yBAAK9D,UAAU,qBACb,kBAAC4I,EAAA,EAAe,CACdC,YArJM,6BAsJNC,gBAAiB,SAACnB,GAAI,OAAKD,EAAqBC,SAKxD,yBAAK3H,UAAU,6BACf,yBAAKA,UAAU,UACb,kBAAC6D,EAAA,EAAM,CACL7D,UAAWR,IAAW,YAAa,CAAEuJ,OAAQhB,IAC7C3H,QAAS,kBAAO2H,EAAsB,KAAOR,KAC7CxC,MAAOzD,EAAE,iBACTuD,SAAUkD,UAwBhB,M,snDCzMSiB,MAff,SAAuC5D,GACrC,IAAQ6D,EAAkC7D,EAAlC6D,qBAAyBC,EAAI,EAAK9D,EAAK,GAEzCY,EAAamD,uBAAY,WAC7BF,MACC,CAACA,IAEEG,EAAW,OACZF,GAAI,IACPlD,eAGF,OAAO,kBAAC,EAAyBoD,I,oxECsBpBC,OA9Bf,SAAmCjE,GACjC,IAAMwB,EAAWC,cAKXZ,EAAkBqD,aAAY,SAACC,GAAK,OAAKC,IAAUC,2BAA2BF,MAE7ErD,EAEL,GAFeoD,aAAY,SAACC,GAAK,MAAK,CACtCC,IAAUE,cAAcH,EAAOI,IAAaC,4BAC5C,GAFW,GAIPzD,EAA+BmD,aAAY,SAACC,GAAK,OAAKC,IAAUK,gCAAgCN,MAGhGnD,EAAckD,aAAY,SAACC,GAAK,OAAKC,IAAUM,eAAeP,EAAOI,IAAaC,2BAGlFR,EAAW,SACZhE,GAAK,IACR6D,qBAlB2B,WAC3BrC,EAASmD,IAAQC,aAAaL,IAAaC,0BAkB3C3D,kBACAC,SACAC,+BACAC,gBAGF,OAAO,kBAAC,EAAkCgD,IChC7BC","file":"chunks/8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"LEFT_HEADER_WIDTH\":\"41px\",\"RIGHT_HEADER_WIDTH\":\"41px\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LEFT_HEADER_WIDTH\":\"41px\",\"RIGHT_HEADER_WIDTH\":\"41px\"};","import FileListPanel from './FileListPanel';\n\nexport default FileListPanel;","import React from 'react';\nimport classNames from 'classnames';\nimport './FileListPanel.scss';\n\nconst FileListPanel = ({ defaultValue, onFileSelect, list = [] }) => {\n  const { id } = defaultValue || {};\n\n  const onRowClick = (id) => {\n    onFileSelect(list.find((item) => item.id === id));\n  };\n\n  const onRowKeyDown = (event, id) => {\n    if (event.key === 'Enter') {\n      onFileSelect(list.find((item) => item.id === id));\n    }\n  };\n\n  const getFileThumbnail = (item) => {\n    if (item.hasOwnProperty('thumbnail')) {\n      let src = null;\n      const thumbnail = item.thumbnail;\n      if (thumbnail.url) {\n        src = thumbnail.url;\n      } else if (thumbnail.toDataURL) {\n        src = thumbnail.toDataURL();\n      }\n      // If thumbnail doesnt have a url or is canvas then we just show a blank square\n      const img = <img src={src} className=\"li-div-img\" />;\n      return (<div className=\"li-div\">{img}</div>);\n    }\n    return null;\n  };\n\n  const elements = list.map((item, i) => {\n    const isSelected = id === item.id;\n    const modalClass = classNames({\n      selected: isSelected\n    });\n\n    const thumbnail = getFileThumbnail(item);\n\n    return (\n      <li tabIndex=\"0\" key={i} onClick={() => onRowClick(item.id)} onKeyDown={(event) => onRowKeyDown(event, item.id)} className={modalClass}>\n        {thumbnail}\n        <div className=\"li-div-txt\" >{item.filename}</div>\n      </li>\n    );\n  });\n\n  return (\n    <div className=\"FileListPanel\">\n      <ul>\n        {elements}\n      </ul>\n    </div>\n  );\n};\n\nexport default FileListPanel;\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport Button from 'components/Button';\nimport { useTranslation } from 'react-i18next';\nimport PageNumberInput from '../PageNumberInput';\nimport '../PageReplacementModal.scss';\nimport './FileSelectedPanel.scss';\nimport PageThumbnailsGrid from 'src/components/PageThumbnailsGrid';\nimport useMedia from 'src/hooks/useMedia';\n\nconst MAX_NAME_LENGTH_BEFORE_TRUNCATION = 25;\nconst TRUNCATION_LENGTH = 10;\nconst TABLET_TRUNCATION_LENGTH = 4;\n\n// Need to forward the ref so the FocusTrap works correctly\nconst FileSelectedPanel = React.forwardRef((\n  {\n    closeThisModal,\n    clearLoadedFile,\n    pageIndicesToReplace,\n    sourceDocument,\n    replacePagesHandler,\n    documentInViewer,\n    closeModalWarning,\n  }, ref) => {\n  const [t] = useTranslation();\n\n  const [currentDocSelectedPageNumbers, setCurrentDocSelectedPageNumbers] = useState(pageIndicesToReplace.map((index) => index + 1));\n  const [selectedThumbnails, setSelectedThumbnails] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n  const [sourceDocumentName, setSourceDocumentName] = useState(null);\n  const [currentDocumentName, setCurrentDocumentName] = useState(null);\n  const [sourceDocumentPageCount, setSourceDocumentPageCount] = useState(0);\n  const [pageNumberError, setPageNumberError] = useState('');\n\n  const isTablet = useMedia(\n    // Media queries\n    ['(min-width: 641px) and (max-width: 900px)'],\n    [true],\n    // Default value\n    false,\n  );\n\n  const isMobile = useMedia(\n    // Media queries\n    ['(max-width: 640px)'],\n    [true],\n    // Default value\n    false,\n  );\n\n  useEffect(() => {\n    if (sourceDocument) {\n      const pageCount = sourceDocument.getPageCount();\n      const selectedPages = {};\n      for (let i = 1; i <= pageCount; i++) {\n        selectedPages[i] = true;\n      }\n      setSelectedThumbnails(selectedPages);\n    }\n  }, [sourceDocument]);\n\n  useEffect(() => {\n    function getTruncatedName(documentName) {\n      let truncatedName;\n      if (documentName.length > MAX_NAME_LENGTH_BEFORE_TRUNCATION) {\n        if (isTablet && !isMobile) {\n          truncatedName = `\"${documentName.slice(0, TABLET_TRUNCATION_LENGTH)}...${documentName.slice(documentName.length)}\"`;\n        } else {\n          truncatedName = `\"${documentName.slice(0, TRUNCATION_LENGTH)}...${documentName.slice(documentName.length - TRUNCATION_LENGTH)}\"`;\n        }\n      } else {\n        truncatedName = `\"${documentName}\"`;\n      }\n\n      return truncatedName;\n    }\n\n    if (sourceDocument) {\n      const pageCount = sourceDocument.getPageCount();\n      setSourceDocumentPageCount(pageCount);\n      setSourceDocumentName(getTruncatedName(sourceDocument.getFilename()));\n      setCurrentDocumentName(getTruncatedName(documentInViewer.getFilename()));\n    }\n  }, [sourceDocument]);\n\n  const replacePages = () => {\n    const pagesToReplaceIntoDocument = getPageNumbersFromSelectedThumbnails();\n    replacePagesHandler(sourceDocument, currentDocSelectedPageNumbers, pagesToReplaceIntoDocument);\n    closeThisModal();\n  };\n\n  const deselectAllThumbnails = () => {\n    setSelectedThumbnails({});\n  };\n\n  const getPageNumbersFromSelectedThumbnails = () => {\n    const selectedPageNumbers = [];\n\n    for (const pageNumber in selectedThumbnails) {\n      if (selectedThumbnails[pageNumber]) {\n        selectedPageNumbers.push(parseInt(pageNumber));\n      }\n    }\n    return selectedPageNumbers;\n  };\n\n  const onThumbnailSelected = (pageNumber) => {\n    if (selectedThumbnails[pageNumber] === undefined) {\n      selectedThumbnails[pageNumber] = true;\n    } else {\n      selectedThumbnails[pageNumber] = !selectedThumbnails[pageNumber];\n    }\n    setSelectedThumbnails({ ...selectedThumbnails });\n  };\n\n  const isReplaceButtonDisabled = () => {\n    if (currentDocSelectedPageNumbers.length < 1 || pageNumberError) {\n      return true;\n    }\n    for (const pageIndex in selectedThumbnails) {\n      if (selectedThumbnails[pageIndex]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const onSourceDocumentNumberInputChange = (selectedPageNumbers) => {\n    const selectedPagesMap = selectedPageNumbers.reduce((map, pageNumber) => ({ ...map, [pageNumber]: true }), {});\n    setSelectedThumbnails({ ...selectedPagesMap });\n  };\n\n  const handlePageNumbersChanged = (pageNumbers) => {\n    setPageNumberError(null);\n    setCurrentDocSelectedPageNumbers(pageNumbers);\n  };\n\n  const handlePageNumberError = (pageNumber) => {\n    if (pageNumber) {\n      setPageNumberError(`${t('message.errorPageNumber')} ${loadedDocumentPageCount}`);\n    }\n  };\n\n  const onCloseHandler = () => {\n    closeModalWarning();\n  };\n\n  const loadedDocumentPageCount = documentInViewer.getPageCount();\n\n  return (\n    <div className=\"fileSelectedPanel container\" onMouseDown={(e) => e.stopPropagation()} ref={ref}>\n      <div className=\"swipe-indicator\" />\n      <div className=\"header-container\">\n        <div className=\"header\">\n          <div className='left-header'>\n            <Button\n              img={'icon-arrow-back'}\n              onClick={clearLoadedFile}\n              dataElement={'insertFromFileBackButton'}\n              title={t('action.back')}\n            />\n            {t('component.pageReplaceModalTitle')}\n          </div>\n          <Button\n            img={'icon-close'}\n            onClick={onCloseHandler}\n            dataElement={'pageReplacementModalClose'}\n            className={'closeButton'}\n            aria-label=\"Cancel\"\n          />\n        </div>\n      </div>\n      <div className=\"page-replacement-divider\" />\n      <div className=\"modal-body\">\n        <div className=\"replace-page-input-container\">\n          <div className=\"replace-page-input\">{t('option.pageReplacementModal.pageReplaceInputLabel')}</div>\n          <div className=\"replace-page-input-current-doc-containers\">\n            <PageNumberInput\n              selectedPageNumbers={currentDocSelectedPageNumbers}\n              pageCount={loadedDocumentPageCount}\n              onBlurHandler={handlePageNumbersChanged}\n              onError={handlePageNumberError}\n            />\n            {pageNumberError && <div className=\"page-number-error\">{pageNumberError}</div>}\n          </div>\n          <div className=\"replace-page-input\"><span className=\"page-replace-doc-name\">{currentDocumentName}</span></div>\n          <span className=\"page-replacement-text\">{t('option.pageReplacementModal.pageReplaceInputFromSource')}</span>\n          <PageNumberInput\n            selectedPageNumbers={getPageNumbersFromSelectedThumbnails()}\n            pageCount={sourceDocumentPageCount}\n            onBlurHandler={onSourceDocumentNumberInputChange}\n          />\n          <div className=\"replace-page-input\"><span className=\"page-replace-doc-name\">{sourceDocumentName}</span></div>\n        </div>\n        <div className={classNames('modal-body-container', { isLoading })}>\n          <PageThumbnailsGrid\n            document={sourceDocument}\n            onThumbnailSelected={onThumbnailSelected}\n            selectedThumbnails={selectedThumbnails}\n            onfileLoadedHandler={setIsLoading}\n          />\n        </div>\n      </div>\n      <div className=\"page-replacement-divider\" />\n      <div className={classNames('footer', { isFileSelected: !isLoading })}>\n        <button className={classNames('deselect-thumbnails', { disabled: isLoading })} onClick={deselectAllThumbnails} disabled={isLoading}>\n          {t('action.deselectAll')}\n        </button>\n        <Button\n          className=\"modal-btn replace-btn\"\n          onClick={() => replacePages()}\n          label={t('action.replace')}\n          disabled={isReplaceButtonDisabled()}\n        />\n      </div>\n    </div >\n  );\n});\n\nFileSelectedPanel.displayName = 'FileSelectedPanel';\n\nexport default FileSelectedPanel;\n","import React from 'react';\nimport FileSelectedPanel from './FileSelectedPanel';\nimport { replacePages } from '../../../helpers/pageManipulationFunctions';\nimport core from 'core';\n\n// Need to forward the ref to keep the focus trap working correctly\nconst FileSelectedPanelContainer = React.forwardRef((props, ref) => {\n  const documentInViewer = core.getDocument();\n\n  return (\n    <FileSelectedPanel\n      {...props}\n      documentInViewer={documentInViewer}\n      replacePagesHandler={replacePages}\n      ref={ref}\n    />\n  );\n});\n\nFileSelectedPanelContainer.displayName = 'FileSelectedPanelContainer';\n\nexport default FileSelectedPanelContainer;\n","import FileSelectedPanel from './FileSelectedPanelContainer';\n\nexport default FileSelectedPanel;","import React, { useState, useEffect } from 'react';\nimport classNames from 'classnames';\nimport core from 'core';\nimport { useTranslation } from 'react-i18next';\nimport { FocusTrap } from '@pdftron/webviewer-react-toolkit';\nimport FileListPanel from './FileListPanel';\nimport FileInputPanel from './FileInputPanel';\nimport FilePickerPanel from './FilePickerPanel';\nimport { Swipeable } from 'react-swipeable';\nimport { Tabs, Tab, TabPanel } from 'components/Tabs';\nimport Button from 'components/Button';\nimport FileSelectedPanel from './FileSelectedPanel';\nimport { exitPageReplacementWarning } from 'helpers/pageManipulationFunctions';\nimport { useDispatch } from 'react-redux';\nimport getRootNode from 'helpers/getRootNode';\n\nimport './PageReplacementModal.scss';\n\nconst isValidUrlRegex = new RegExp(/^(?:http(s)?:\\/\\/)?[\\w.-]+(?:\\.[\\w\\.-]+)+[\\w\\-\\._~:/?#[\\]@!\\$&'\\(\\)\\*\\+,;=.]+$/, 'm');\nconst options = { loadAsPDF: true, l: window.sampleL /* license key here */ };\n\nconst PageReplacementModal = ({\n  closeModal,\n  selectableFiles,\n  isOpen,\n  selectedThumbnailPageIndexes,\n  selectedTab,\n}) => {\n  const [t] = useTranslation();\n  const [source, setSource] = useState({});\n  const [selectedDoc, setSelectedDoc] = useState(null);\n  const [isFileSelected, setIsFileSelected] = useState(false);\n  const [selectedTabInternal, setSelectedTabInternal] = useState(null);\n\n  const fileInputId = 'pageReplacementFileInputId';\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (isOpen && selectedTabInternal !== selectedTab) {\n      setSelectedTabInternal(selectedTab);\n    }\n  }, [isOpen, selectedTabInternal, selectedTab]);\n\n  const closeThisModal = () => {\n    setSelectedDoc(null);\n    setIsFileSelected(false);\n    const el = getRootNode().querySelector(`#${fileInputId}`);\n    if (el) {\n      el.value = null;\n    }\n    closeModal();\n    setSelectedTabInternal(null);\n    setSource({});\n  };\n\n  const closeModalWarning = () => exitPageReplacementWarning(closeThisModal, dispatch);\n\n  const modalClass = classNames({\n    Modal: true,\n    PageReplacementModal: true,\n    open: isOpen,\n    closed: !isOpen,\n  });\n\n  const srcString = source[selectedTabInternal];\n  const handleSelection = async () => {\n    setIsFileSelected(true);\n    let document;\n    if (srcString && selectedTabInternal === 'customFileListPanelButton') {\n      if (srcString.onSelect) {\n        document = await srcString.onSelect();\n        setSelectedDoc(document);\n      }\n    } else if (srcString) {\n      document = await core.createDocument(srcString, options);\n      setSelectedDoc(document);\n    }\n  };\n\n  // File picker can merge docs, in which case the callback gets\n  // executed with a Document not a file\n  const fileProcessedHandler = async (file) => {\n    let document;\n    // eslint-disable-next-line no-undef\n    if (file instanceof instance.Core.Document) {\n      document = file;\n    } else {\n      document = await core.createDocument(file, options);\n    }\n    setSelectedDoc(document);\n    setIsFileSelected(true);\n  };\n\n  let isSelectBtnDisabled = srcString === undefined;\n\n  if (selectedTabInternal === 'urlInputPanelButton' && !isValidUrlRegex.test(srcString)) {\n    isSelectBtnDisabled = true;\n  }\n\n  const clearDocument = () => {\n    setSelectedDoc(null);\n    setIsFileSelected(false);\n  };\n\n  const renderFileSelectedPanel = () => {\n    return (\n      <FileSelectedPanel\n        closeThisModal={closeThisModal}\n        clearLoadedFile={clearDocument}\n        pageIndicesToReplace={selectedThumbnailPageIndexes}\n        sourceDocument={selectedDoc}\n        closeModalWarning={closeModalWarning}\n      />\n    );\n  };\n\n  const renderSelectionTabs = () => {\n    const isFilePanelEnabled = selectableFiles && selectableFiles.length > 0;\n\n    return (\n      <div className=\"container tabs\" onMouseDown={(e) => e.stopPropagation()}>\n        <div className=\"swipe-indicator\" />\n        <Tabs className=\"page-replacement-tabs\" id=\"pageReplacementModal\">\n          <div className=\"header-container\">\n            <div className=\"header\">\n              {t('component.pageReplaceModalTitle')}\n              <Button\n                img={'icon-close'}\n                onClick={closeThisModal}\n                dataElement={'pageReplacementModalClose'}\n                aria-label=\"Cancel\"\n              />\n            </div>\n            <div className=\"tab-list\">\n              {isFilePanelEnabled &&\n                <>\n                  <Tab dataElement=\"customFileListPanelButton\">\n                    <button className=\"tab-options-button\">\n                      {t('option.pageReplacementModal.yourFiles')}\n                    </button>\n                  </Tab>\n                  <div className=\"tab-options-divider\" />\n                </>\n              }\n              <Tab dataElement=\"urlInputPanelButton\">\n                <button className=\"tab-options-button\">\n                  {t('link.url')}\n                </button>\n              </Tab>\n              <div className=\"tab-options-divider\" />\n              <Tab dataElement=\"filePickerPanelButton\">\n                <button className=\"tab-options-button\">\n                  {t('option.pageReplacementModal.localFile')}\n                </button>\n              </Tab>\n            </div>\n          </div>\n          <div className=\"page-replacement-divider\" />\n          <TabPanel dataElement=\"customFileListPanel\">\n            <div className=\"panel-body\">\n              <FileListPanel\n                onFileSelect={(selection) => {\n                  setSource({ [selectedTabInternal]: selection });\n                }}\n                list={selectableFiles}\n                defaultValue={srcString}\n              />\n            </div>\n          </TabPanel>\n          <TabPanel dataElement=\"urlInputPanel\">\n            <div className=\"panel-body\">\n              <FileInputPanel\n                onFileSelect={(url) => {\n                  setSource({ [selectedTabInternal]: url });\n                }}\n                defaultValue={source['urlInputPanelButton']}\n              />\n            </div>\n          </TabPanel>\n          <TabPanel dataElement=\"filePickerPanel\">\n            <div className=\"panel-body upload\">\n              <FilePickerPanel\n                fileInputId={fileInputId}\n                onFileProcessed={(file) => fileProcessedHandler(file)}\n              />\n            </div>\n          </TabPanel>\n        </Tabs>\n        <div className=\"page-replacement-divider\" />\n        <div className=\"footer\">\n          <Button\n            className={classNames('modal-btn', { noFile: isSelectBtnDisabled })}\n            onClick={() => (isSelectBtnDisabled ? null : handleSelection())}\n            label={t('action.select')}\n            disabled={isSelectBtnDisabled}\n          />\n        </div>\n      </div>\n    );\n  };\n\n  return isOpen ? (\n    <Swipeable\n      onSwipedUp={closeThisModal}\n      onSwipedDown={closeThisModal}\n      preventDefaultTouchmoveEvent\n    >\n      <div\n        className={modalClass}\n        data-element=\"pageReplacementModal\"\n        onMouseDown={isFileSelected ? closeModalWarning : closeThisModal}\n        id=\"pageReplacementModal\"\n      >\n        <FocusTrap locked={isOpen}>\n          {isFileSelected ? renderFileSelectedPanel() : renderSelectionTabs()}\n        </FocusTrap>\n      </div>\n    </Swipeable>\n  ) : null;\n};\n\nexport default PageReplacementModal;\n","import React, { useCallback } from 'react';\nimport PageReplacementModal from './PageReplacementModal';\n\nfunction PageReplacementModalContainer(props) {\n  const { closePageReplacement, ...rest } = props;\n\n  const closeModal = useCallback(() => {\n    closePageReplacement();\n  }, [closePageReplacement]);\n\n  const newProps = {\n    ...rest,\n    closeModal,\n  };\n\n  return <PageReplacementModal {...newProps} />;\n}\n\nexport default PageReplacementModalContainer;","import React from 'react';\nimport selectors from 'selectors';\nimport actions from 'actions';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PageReplacementModalContainer from './PageReplacementModalContainer';\nimport DataElements from 'constants/dataElement';\n\nfunction PageReplacementModalRedux(props) {\n  const dispatch = useDispatch();\n  const closePageReplacement = () => {\n    dispatch(actions.closeElement(DataElements.PAGE_REPLACEMENT_MODAL));\n  };\n\n  const selectableFiles = useSelector((state) => selectors.getPageReplacementFileList(state));\n\n  const [isOpen] = useSelector((state) => [\n    selectors.isElementOpen(state, DataElements.PAGE_REPLACEMENT_MODAL),\n  ]);\n\n  const selectedThumbnailPageIndexes = useSelector((state) => selectors.getSelectedThumbnailPageIndexes(state)\n  );\n\n  const selectedTab = useSelector((state) => selectors.getSelectedTab(state, DataElements.PAGE_REPLACEMENT_MODAL)\n  );\n\n  const newProps = {\n    ...props,\n    closePageReplacement,\n    selectableFiles,\n    isOpen,\n    selectedThumbnailPageIndexes,\n    selectedTab,\n  };\n\n  return <PageReplacementModalContainer {...newProps} />;\n}\n\nexport default PageReplacementModalRedux;","import PageReplacementModalRedux from './PageReplacementModalRedux';\n\nexport default PageReplacementModalRedux;"],"sourceRoot":""}